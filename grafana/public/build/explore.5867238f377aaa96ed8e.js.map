{"version":3,"sources":["webpack:///./public/app/features/explore/state/actions.ts","webpack:///./public/app/features/explore/TimePicker.tsx","webpack:///./public/app/features/explore/Panel.tsx","webpack:///./public/app/features/explore/ErrorBoundary.tsx","webpack:///./public/app/features/explore/Legend.tsx","webpack:///./public/app/features/explore/Graph.tsx","webpack:///./public/app/features/explore/utils/set.ts","webpack:///./public/app/features/explore/Explore.tsx","webpack:///./public/app/features/explore/Error.tsx","webpack:///./public/app/features/explore/GraphContainer.tsx","webpack:///./public/app/features/explore/LogsContainer.tsx","webpack:///./public/app/features/explore/QueryRows.tsx","webpack:///./public/app/features/explore/QueryRow.tsx","webpack:///./public/app/features/explore/QueryEditor.tsx","webpack:///./public/app/features/explore/TableContainer.tsx","webpack:///./public/app/features/explore/Table.tsx","webpack:///./public/app/features/explore/ExploreToolbar.tsx","webpack:///./public/app/core/components/ToggleButtonGroup/ToggleButtonGroup.tsx","webpack:///./public/app/features/explore/LogLabelStats.tsx","webpack:///./public/app/features/explore/LogLabel.tsx","webpack:///./public/app/features/explore/LogLabels.tsx","webpack:///./public/app/features/explore/LogMessageAnsi.tsx","webpack:///./public/app/features/explore/LogRow.tsx","webpack:///./public/app/features/explore/Logs.tsx","webpack:///./public/app/core/utils/reselect.ts","webpack:///./public/app/features/explore/state/selectors.ts","webpack:///./public/app/features/explore/ElapsedTime.tsx","webpack:///./public/app/features/explore/QueryTransactionStatus.tsx","webpack:///./public/app/features/explore/Wrapper.tsx"],"names":["updateExploreUIState","exploreId","uiStateFragment","dispatch","Object","_actionTypes__WEBPACK_IMPORTED_MODULE_7__","tslib__WEBPACK_IMPORTED_MODULE_0__","stateSave","addQueryRow","index","getState","query","app_core_utils_explore__WEBPACK_IMPORTED_MODULE_4__","explore","queries","changeDatasource","datasource","_this","this","app_features_plugins_datasource_srv__WEBPACK_IMPORTED_MODULE_3__","get","newDataSourceInstance","_a","sent","currentDataSourceInstance","datasourceInstance","importQueries","loadDatasource","console","error","error_1","runQueries","changeQuery","override","changeSize","height","width","changeTime","range","clearQueries","initializeExplore","datasourceName","containerWidth","eventBridge","ui","exploreDatasources","getExternal","map","ds","value","name","meta","length","instance","error_2","error_3","loadDatasourceSuccess","supportsGraph","metrics","supportsLogs","logs","supportsTable","tables","StartPage","pluginExports","ExploreStartPage","historyKey","id","history","app_core_store__WEBPACK_IMPORTED_MODULE_2__","getObject","set","showingStartPage","Boolean","sourceDataSource","targetDataSource","importedQueries","nextQueries","q","i","requestedDatasourceName","datasourceError","testDatasource","testResult","status","message","error_4","statusText","Promise","reject","init","resolve","modifyQueries","modification","modifier","preventSubmit","ignoreUIState","showingLogs","showingGraph","showingTable","interval","runQueriesForType","format","instant","valueWithRefId","data","resultType","queryOptions","resultGetter","queryIntervals","scanning","datasourceId","forEach","rowIndex","transaction","now","Date","options","res","emit","latency","queryTransactions","results","transactionId","result","scanner","find","qt","hints","getQueryHints","nextQueryTransactions","done","nextHistory","lodash__WEBPACK_IMPORTED_MODULE_1___default","a","size","queryTransactionSuccess","response_1","response","cancelled","errorDetails","Error","queryTransactionFailure","scanStart","setQueries","rawQueries","splitClose","itemId","splitOpen","leftState","app_types_explore__WEBPACK_IMPORTED_MODULE_6__","left","queryState","location","urlState","itemState","slice","right","split","urlStates","leftUrlState","dedupStrategy","rightUrlState","app_core_actions__WEBPACK_IMPORTED_MODULE_5__","togglePanelActionCreator","actionCreator","isPanelVisible","uiFragmentStateUpdate","shouldRunQueries","type","toggleGraph","toggleLogs","toggleTable","changeDedupStrategy","refreshExplore","initialized","update","refreshQueries","refreshRange","from","_TimePicker__WEBPACK_IMPORTED_MODULE_8__","to","initialQueries","initialRange","DATE_FORMAT","DEFAULT_RANGE","parseTime","isUtc","ensureString","moment__WEBPACK_IMPORTED_MODULE_2___default","isMoment","indexOf","time","isNaN","parseInt","utc","TimePicker","_super","props","call","handleChangeFrom","e","setState","fromRaw","target","handleChangeTo","toRaw","handleClickApply","onChangeTime","state","app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_3__","isOpen","rangeString","app_core_utils_rangeutil__WEBPACK_IMPORTED_MODULE_4__","handleClickLeft","move","handleClickPicker","handleClickRight","handleClickRefresh","handleClickRelativeOption","dropdownRef","el","dropdownEl","refreshInterval","getDerivedStateFromProps","prototype","direction","nextTo","nextFrom","step","timespan","valueOf","nextRange","nextTimeRange","raw","getTimeOptions","renderDropdown","timeOptions","react__WEBPACK_IMPORTED_MODULE_1___default","createElement","ref","className","keys","section","group","key","option","active","display","onClick","_grafana_ui__WEBPACK_IMPORTED_MODULE_5__","onChange","render","react__WEBPACK_IMPORTED_MODULE_1__","Panel","apply","arguments","onClickToggle","onToggle","iconClass","loaderClass","loading","label","children","ErrorBoundary","errorInfo","componentDidCatch","style","whiteSpace","toString","componentStack","Legend_LegendItem","LegendItem","onClickLabel","series","tslib_es6","hidden","seriesClasses","classnames_default","graph-legend-series-hidden","react_default","color","title","alias","react","explore_Legend","Legend","event","onToggleSeries","ctrlKey","metaKey","shiftKey","hiddenSeries","items","has","defaultProps","time_format","ticks","min","max","secPerTick","FLOT_OPTIONS","legend","show","lines","linewidth","zero","shadowSize","grid","minBorderMargin","markings","backgroundColor","borderWidth","clickable","margin","labelMarginX","selection","mode","Graph_Graph","Graph","dynamicOptions","Set","showAllTimeSeries","onPlotSelected","ranges","moment_default","xaxis","onShowAllTimeSeries","draw","exclusive","oneSeriesVisible","d","nextHiddenSeries","filter","availableSeries","b","it","values","next","add","intersect","delete","getGraphData","componentDidMount","$el","jquery_js_exposed_default","bind","componentDidUpdate","prevProps","prevState","equal","componentWillUnmount","unbind","getDynamicOptions","datemath","timezone","timeformat","userOptions","ts","getFlotPairs","plot","_b","_c","Fragment","__webpack_exports__","Explore","getRef","changedByScanner","onStopScanning","onClickExample","onModifyQueries","action","modifyQuery","onResize","onStartScanning","scanPreviousRange","timepickerRef","current","scanStopAction","exploreEvents","app_core_utils_emitter__WEBPACK_IMPORTED_MODULE_15__","createRef","app_core_utils_explore__WEBPACK_IMPORTED_MODULE_14__","_d","initialDatasource","app_core_store__WEBPACK_IMPORTED_MODULE_5__","_TimePicker__WEBPACK_IMPORTED_MODULE_12__","offsetWidth","removeAllListeners","datasourceLoading","datasourceMissing","queryKeys","exploreClass","_ExploreToolbar__WEBPACK_IMPORTED_MODULE_16__","_Error__WEBPACK_IMPORTED_MODULE_6__","_QueryRows__WEBPACK_IMPORTED_MODULE_10__","react_virtualized__WEBPACK_IMPORTED_MODULE_4__","disableHeight","_ErrorBoundary__WEBPACK_IMPORTED_MODULE_7__","_GraphContainer__WEBPACK_IMPORTED_MODULE_8__","_TableContainer__WEBPACK_IMPORTED_MODULE_11__","onClickCell","_LogsContainer__WEBPACK_IMPORTED_MODULE_9__","PureComponent","mapDispatchToProps","_state_actions__WEBPACK_IMPORTED_MODULE_13__","_state_actionTypes__WEBPACK_IMPORTED_MODULE_17__","react_hot_loader__WEBPACK_IMPORTED_MODULE_2__","module","react_redux__WEBPACK_IMPORTED_MODULE_3__","item","__webpack_require__","Alert","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","GraphContainer","onClickGraphButton","timeRange","graphResult","graphHeight","_Panel__WEBPACK_IMPORTED_MODULE_6__","_Graph__WEBPACK_IMPORTED_MODULE_5__","_state_actions__WEBPACK_IMPORTED_MODULE_4__","some","LogsContainer","onClickLogsButton","handleDedupStrategyChange","hangleToggleLogLevel","hiddenLogLevels","toggleLogLevelAction","logsHighlighterExpressions","logsResult","dedupedResult","scanRange","_Panel__WEBPACK_IMPORTED_MODULE_7__","_Logs__WEBPACK_IMPORTED_MODULE_6__","app_core_logs_model__WEBPACK_IMPORTED_MODULE_4__","none","dedupedData","highlighterExpressions","onDedupStrategyChange","onToggleLogLevel","_state_actions__WEBPACK_IMPORTED_MODULE_5__","app_features_explore_state_actionTypes__WEBPACK_IMPORTED_MODULE_8__","app_features_explore_state_selectors__WEBPACK_IMPORTED_MODULE_9__","QueryRows","_QueryRow__WEBPACK_IMPORTED_MODULE_2__","QueryRow","onExecuteQuery","onChangeQuery","getHighlighterExpression","updateLogsHighlights","onClickAddButton","onClickClearButton","onClickHintFix","onClickRemoveButton","removeQueryRowAction","lodash__WEBPACK_IMPORTED_MODULE_2___default","debounce","expressions","highlightLogsExpressionAction","log","transactions","t","transactionWithError","undefined","hint","getFirstHintFromTransactions","queryError","QueryField","ExploreQueryField","_QueryTransactionStatus__WEBPACK_IMPORTED_MODULE_6__","onExecuteHint","onQueryChange","_QueryEditor__WEBPACK_IMPORTED_MODULE_5__","initialQuery","_state_actions__WEBPACK_IMPORTED_MODULE_7__","_state_actionTypes__WEBPACK_IMPORTED_MODULE_8__","react_hot_loader__WEBPACK_IMPORTED_MODULE_3__","react_redux__WEBPACK_IMPORTED_MODULE_4__","QueryEditor","element","initTimeSrv","loader","app_core_services_AngularLoader__WEBPACK_IMPORTED_MODULE_2__","scopeProps","ctrl","refresh","events","panel","targets","dashboard","component","load","destroy","app_features_dashboard_services_TimeSrv__WEBPACK_IMPORTED_MODULE_3__","getTimezone","timeRangeUpdated","TableContainer","onClickTableButton","tableResult","_Table__WEBPACK_IMPORTED_MODULE_5__","EMPTY_TABLE","VALUE_REGEX","Table","getCellProps","rowInfo","column","columnKey","Header","rowValue","row","tableModel","columnNames","columns","text","filterable","react__WEBPACK_IMPORTED_MODULE_2___default","accessor","test","Cell","noDataText","react_table__WEBPACK_IMPORTED_MODULE_3__","rows","getTdProps","minRows","resolveData","cells","zipObject","prepareRows","showPagination","react__WEBPACK_IMPORTED_MODULE_2__","IconSide","createResponsiveButton","defaultOptions","iconSide","buttonClassName","iconClassName","splitted","UnConnectedExploreToolbar","onChangeDatasource","onClearAll","clearAll","onRunQuery","runQuery","onCloseTimePicker","selectedDatasource","closeSplit","app_core_components_Select_DataSourcePicker__WEBPACK_IMPORTED_MODULE_4__","datasources","app_core_components_ClickOutsideWrapper_ClickOutsideWrapper__WEBPACK_IMPORTED_MODULE_7__","_TimePicker__WEBPACK_IMPORTED_MODULE_6__","ExploreToolbar","react_redux__WEBPACK_IMPORTED_MODULE_2__","exploreItem","ToggleButtonGroup","transparent","ToggleButton","selected","tooltip","btnClassName","button","stopPropagation","src","content","placement","LogLabelStatsRow","logLabelStatsModel","count","proportion","percent","Math","round","barStyle","logs-stats-row--active","LogLabelStats_LogLabelStats","LogLabelStats","rowCount","stats","onClickClose","topRows","activeRow","otherRows","insertActiveRow","otherCount","reduce","sum","total","otherProportion","stat","LogLabel_LogLabel","LogLabel","showStats","onClickStats","allRows","getRows","logs_model","plain","LogLabels_LogLabels","LogLabels","labels","LogMessageAnsi_LogMessageAnsi","LogMessageAnsi","chunks","prevValue","ansicolor","parse","spans","span","css","accumulated","line","match","replace","_","character","toUpperCase","chunk","LogRow_LogRow","LogRow","fieldCount","fieldLabel","fieldStats","fieldValue","parsed","parser","parsedFieldHighlights","showFieldStats","onClickHighlight","fieldText","getLabelFromField","getValueFromField","matcher","buildMatcher","onMouseOverMessage","mouseMessageTimer","setTimeout","parseMessage","onMouseOutMessage","clearTimeout","entry","getFields","showDuplicates","showLabels","showLocalTime","showUtc","hasAnsi","previewHighlights","lodash_default","isEqual","searchWords","highlights","needsHighlighter","highlightClassName","logs-row__match-highlight--preview","duplicates","logLevel","timeLocal","timeFromNow","timestamp","uniqueLabels","onMouseEnter","onMouseLeave","main_default","autoEscape","highlightTag","textToHighlight","findChunks","utils_text","graphOptions","stack","bars","lineWidth","yaxis","tickDecimals","Logs_Logs","Logs","deferLogs","renderAll","onChangeDedup","dedup","onChangeLabels","checked","onChangeLocalTime","onChangeUtc","rawLevel","hiddenRawLevels","Array","level","onClickScan","preventDefault","onClickStopScan","renderAll_1","PREVIEW_LIMIT","deferLogsTimer","renderAllTimer","hasData","hasLabel","hasUniqueLabels","dedupCount","push","kind","Number","processedRows","firstRows","lastRows","scanText","rangeutil","timeSeries","time_series2","components_ToggleButtonGroup_ToggleButtonGroup","dedupType","LabelsMap","createLodashMemoizedSelector","es","lodash","args","_i","acc","val","JSON","stringify","exploreItemUIStateSelector","deduplicatedLogsSelector","filteredData","ElapsedTime","elapsed","tick","offset","start","timer","window","setInterval","componentWillReceiveProps","nextProps","clearInterval","toFixed","QueryTransactionStatus_QueryTransactionStatusItem","QueryTransactionStatusItem","explore_ElapsedTime","QueryTransactionStatus_QueryTransactionStatus","QueryTransactionStatus","Wrapper","resetExploreAction","_grafana_ui__WEBPACK_IMPORTED_MODULE_7__","autoHeightMin","_ErrorBoundary__WEBPACK_IMPORTED_MODULE_5__","_Explore__WEBPACK_IMPORTED_MODULE_6__","app_types_explore__WEBPACK_IMPORTED_MODULE_4__"],"mappings":"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","file":"explore.5867238f377aaa96ed8e.js","sourcesContent":["// Libraries\nimport _ from 'lodash';\n\n// Services & Utils\nimport store from 'app/core/store';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { Emitter } from 'app/core/core';\nimport {\n  LAST_USED_DATASOURCE_KEY,\n  clearQueryKeys,\n  ensureQueries,\n  generateEmptyQuery,\n  hasNonEmptyQuery,\n  makeTimeSeriesList,\n  updateHistory,\n  buildQueryTransaction,\n  serializeStateToUrlParam,\n  parseUrlState,\n} from 'app/core/utils/explore';\n\n// Actions\nimport { updateLocation } from 'app/core/actions';\n\n// Types\nimport {\n  RawTimeRange,\n  TimeRange,\n  DataSourceApi,\n  DataQuery,\n  DataSourceSelectItem,\n  QueryHint,\n  QueryFixAction,\n} from '@grafana/ui/src/types';\nimport { ExploreId, ExploreUrlState, RangeScanner, ResultType, QueryOptions, ExploreUIState } from 'app/types/explore';\nimport {\n  updateDatasourceInstanceAction,\n  changeQueryAction,\n  changeSizeAction,\n  ChangeSizePayload,\n  changeTimeAction,\n  scanStopAction,\n  clearQueriesAction,\n  initializeExploreAction,\n  loadDatasourceMissingAction,\n  loadDatasourceFailureAction,\n  loadDatasourcePendingAction,\n  queriesImportedAction,\n  LoadDatasourceSuccessPayload,\n  loadDatasourceSuccessAction,\n  modifyQueriesAction,\n  queryTransactionFailureAction,\n  queryTransactionStartAction,\n  queryTransactionSuccessAction,\n  scanRangeAction,\n  scanStartAction,\n  setQueriesAction,\n  splitCloseAction,\n  splitOpenAction,\n  addQueryRowAction,\n  toggleGraphAction,\n  toggleLogsAction,\n  toggleTableAction,\n  ToggleGraphPayload,\n  ToggleLogsPayload,\n  ToggleTablePayload,\n  updateUIStateAction,\n  runQueriesAction,\n} from './actionTypes';\nimport { ActionOf, ActionCreator } from 'app/core/redux/actionCreatorFactory';\nimport { LogsDedupStrategy } from 'app/core/logs_model';\nimport { ThunkResult } from 'app/types';\nimport { parseTime } from '../TimePicker';\n\n/**\n * Updates UI state and save it to the URL\n */\nconst updateExploreUIState = (exploreId, uiStateFragment: Partial<ExploreUIState>) => {\n  return dispatch => {\n    dispatch(updateUIStateAction({ exploreId, ...uiStateFragment }));\n    dispatch(stateSave());\n  };\n};\n\n/**\n * Adds a query row after the row with the given index.\n */\nexport function addQueryRow(exploreId: ExploreId, index: number): ThunkResult<void> {\n  return (dispatch, getState) => {\n    const query = generateEmptyQuery(getState().explore[exploreId].queries, index);\n\n    dispatch(addQueryRowAction({ exploreId, index, query }));\n  };\n}\n\n/**\n * Loads a new datasource identified by the given name.\n */\nexport function changeDatasource(exploreId: ExploreId, datasource: string): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const newDataSourceInstance = await getDatasourceSrv().get(datasource);\n    const currentDataSourceInstance = getState().explore[exploreId].datasourceInstance;\n    const queries = getState().explore[exploreId].queries;\n\n    await dispatch(importQueries(exploreId, queries, currentDataSourceInstance, newDataSourceInstance));\n\n    dispatch(updateDatasourceInstanceAction({ exploreId, datasourceInstance: newDataSourceInstance }));\n\n    try {\n      await dispatch(loadDatasource(exploreId, newDataSourceInstance));\n    } catch (error) {\n      console.error(error);\n      return;\n    }\n\n    dispatch(runQueries(exploreId));\n  };\n}\n\n/**\n * Query change handler for the query row with the given index.\n * If `override` is reset the query modifications and run the queries. Use this to set queries via a link.\n */\nexport function changeQuery(\n  exploreId: ExploreId,\n  query: DataQuery,\n  index: number,\n  override: boolean\n): ThunkResult<void> {\n  return (dispatch, getState) => {\n    // Null query means reset\n    if (query === null) {\n      query = { ...generateEmptyQuery(getState().explore[exploreId].queries) };\n    }\n\n    dispatch(changeQueryAction({ exploreId, query, index, override }));\n    if (override) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n}\n\n/**\n * Keep track of the Explore container size, in particular the width.\n * The width will be used to calculate graph intervals (number of datapoints).\n */\nexport function changeSize(\n  exploreId: ExploreId,\n  { height, width }: { height: number; width: number }\n): ActionOf<ChangeSizePayload> {\n  return changeSizeAction({ exploreId, height, width });\n}\n\n/**\n * Change the time range of Explore. Usually called from the Timepicker or a graph interaction.\n */\nexport function changeTime(exploreId: ExploreId, range: TimeRange): ThunkResult<void> {\n  return dispatch => {\n    dispatch(changeTimeAction({ exploreId, range }));\n    dispatch(runQueries(exploreId));\n  };\n}\n\n/**\n * Clear all queries and results.\n */\nexport function clearQueries(exploreId: ExploreId): ThunkResult<void> {\n  return dispatch => {\n    dispatch(scanStopAction({ exploreId }));\n    dispatch(clearQueriesAction({ exploreId }));\n    dispatch(stateSave());\n  };\n}\n\n/**\n * Initialize Explore state with state from the URL and the React component.\n * Call this only on components for with the Explore state has not been initialized.\n */\nexport function initializeExplore(\n  exploreId: ExploreId,\n  datasourceName: string,\n  queries: DataQuery[],\n  range: RawTimeRange,\n  containerWidth: number,\n  eventBridge: Emitter,\n  ui: ExploreUIState\n): ThunkResult<void> {\n  return async dispatch => {\n    const exploreDatasources: DataSourceSelectItem[] = getDatasourceSrv()\n      .getExternal()\n      .map(ds => ({\n        value: ds.name,\n        name: ds.name,\n        meta: ds.meta,\n      }));\n\n    dispatch(\n      initializeExploreAction({\n        exploreId,\n        containerWidth,\n        eventBridge,\n        exploreDatasources,\n        queries,\n        range,\n        ui,\n      })\n    );\n\n    if (exploreDatasources.length >= 1) {\n      let instance;\n\n      if (datasourceName) {\n        try {\n          instance = await getDatasourceSrv().get(datasourceName);\n        } catch (error) {\n          console.error(error);\n        }\n      }\n      // Checking on instance here because requested datasource could be deleted already\n      if (!instance) {\n        instance = await getDatasourceSrv().get();\n      }\n\n      dispatch(updateDatasourceInstanceAction({ exploreId, datasourceInstance: instance }));\n\n      try {\n        await dispatch(loadDatasource(exploreId, instance));\n      } catch (error) {\n        console.error(error);\n        return;\n      }\n      dispatch(runQueries(exploreId, true));\n    } else {\n      dispatch(loadDatasourceMissingAction({ exploreId }));\n    }\n  };\n}\n\n/**\n * Datasource loading was successfully completed. The instance is stored in the state as well in case we need to\n * run datasource-specific code. Existing queries are imported to the new datasource if an importer exists,\n * e.g., Prometheus -> Loki queries.\n */\nexport const loadDatasourceSuccess = (exploreId: ExploreId, instance: any): ActionOf<LoadDatasourceSuccessPayload> => {\n  // Capabilities\n  const supportsGraph = instance.meta.metrics;\n  const supportsLogs = instance.meta.logs;\n  const supportsTable = instance.meta.tables;\n  // Custom components\n  const StartPage = instance.pluginExports.ExploreStartPage;\n\n  const historyKey = `grafana.explore.history.${instance.meta.id}`;\n  const history = store.getObject(historyKey, []);\n  // Save last-used datasource\n  store.set(LAST_USED_DATASOURCE_KEY, instance.name);\n\n  return loadDatasourceSuccessAction({\n    exploreId,\n    StartPage,\n    datasourceInstance: instance,\n    history,\n    showingStartPage: Boolean(StartPage),\n    supportsGraph,\n    supportsLogs,\n    supportsTable,\n  });\n};\n\nexport function importQueries(\n  exploreId: ExploreId,\n  queries: DataQuery[],\n  sourceDataSource: DataSourceApi,\n  targetDataSource: DataSourceApi\n) {\n  return async dispatch => {\n    let importedQueries = queries;\n    // Check if queries can be imported from previously selected datasource\n    if (sourceDataSource.meta.id === targetDataSource.meta.id) {\n      // Keep same queries if same type of datasource\n      importedQueries = [...queries];\n    } else if (targetDataSource.importQueries) {\n      // Datasource-specific importers\n      importedQueries = await targetDataSource.importQueries(queries, sourceDataSource.meta);\n    } else {\n      // Default is blank queries\n      importedQueries = ensureQueries();\n    }\n\n    const nextQueries = importedQueries.map((q, i) => ({\n      ...q,\n      ...generateEmptyQuery(queries),\n    }));\n\n    dispatch(queriesImportedAction({ exploreId, queries: nextQueries }));\n  };\n}\n\n/**\n * Main action to asynchronously load a datasource. Dispatches lots of smaller actions for feedback.\n */\nexport function loadDatasource(exploreId: ExploreId, instance: DataSourceApi): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const datasourceName = instance.name;\n\n    // Keep ID to track selection\n    dispatch(loadDatasourcePendingAction({ exploreId, requestedDatasourceName: datasourceName }));\n    let datasourceError = null;\n\n    try {\n      const testResult = await instance.testDatasource();\n      datasourceError = testResult.status === 'success' ? null : testResult.message;\n    } catch (error) {\n      datasourceError = (error && error.statusText) || 'Network error';\n    }\n\n    if (datasourceError) {\n      dispatch(loadDatasourceFailureAction({ exploreId, error: datasourceError }));\n      return Promise.reject(`${datasourceName} loading failed`);\n    }\n\n    if (datasourceName !== getState().explore[exploreId].requestedDatasourceName) {\n      // User already changed datasource again, discard results\n      return;\n    }\n\n    if (instance.init) {\n      instance.init();\n    }\n\n    if (datasourceName !== getState().explore[exploreId].requestedDatasourceName) {\n      // User already changed datasource again, discard results\n      return;\n    }\n\n    dispatch(loadDatasourceSuccess(exploreId, instance));\n    return Promise.resolve();\n  };\n}\n\n/**\n * Action to modify a query given a datasource-specific modifier action.\n * @param exploreId Explore area\n * @param modification Action object with a type, e.g., ADD_FILTER\n * @param index Optional query row index. If omitted, the modification is applied to all query rows.\n * @param modifier Function that executes the modification, typically `datasourceInstance.modifyQueries`.\n */\nexport function modifyQueries(\n  exploreId: ExploreId,\n  modification: QueryFixAction,\n  index: number,\n  modifier: any\n): ThunkResult<void> {\n  return dispatch => {\n    dispatch(modifyQueriesAction({ exploreId, modification, index, modifier }));\n    if (!modification.preventSubmit) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n}\n\n/**\n * Mark a query transaction as failed with an error extracted from the query response.\n * The transaction will be marked as `done`.\n */\nexport function queryTransactionFailure(\n  exploreId: ExploreId,\n  transactionId: string,\n  response: any,\n  datasourceId: string\n): ThunkResult<void> {\n  return (dispatch, getState) => {\n    const { datasourceInstance, queryTransactions } = getState().explore[exploreId];\n    if (datasourceInstance.meta.id !== datasourceId || response.cancelled) {\n      // Navigated away, queries did not matter\n      return;\n    }\n\n    // Transaction might have been discarded\n    if (!queryTransactions.find(qt => qt.id === transactionId)) {\n      return;\n    }\n\n    console.error(response);\n\n    let error: string;\n    let errorDetails: string;\n    if (response.data) {\n      if (typeof response.data === 'string') {\n        error = response.data;\n      } else if (response.data.error) {\n        error = response.data.error;\n        if (response.data.response) {\n          errorDetails = response.data.response;\n        }\n      } else {\n        throw new Error('Could not handle error response');\n      }\n    } else if (response.message) {\n      error = response.message;\n    } else if (typeof response === 'string') {\n      error = response;\n    } else {\n      error = 'Unknown error during query transaction. Please check JS console logs.';\n    }\n\n    // Mark transactions as complete\n    const nextQueryTransactions = queryTransactions.map(qt => {\n      if (qt.id === transactionId) {\n        return {\n          ...qt,\n          error,\n          errorDetails,\n          done: true,\n        };\n      }\n      return qt;\n    });\n\n    dispatch(queryTransactionFailureAction({ exploreId, queryTransactions: nextQueryTransactions }));\n  };\n}\n\n/**\n * Complete a query transaction, mark the transaction as `done` and store query state in URL.\n * If the transaction was started by a scanner, it keeps on scanning for more results.\n * Side-effect: the query is stored in localStorage.\n * @param exploreId Explore area\n * @param transactionId ID\n * @param result Response from `datasourceInstance.query()`\n * @param latency Duration between request and response\n * @param queries Queries from all query rows\n * @param datasourceId Origin datasource instance, used to discard results if current datasource is different\n */\nexport function queryTransactionSuccess(\n  exploreId: ExploreId,\n  transactionId: string,\n  result: any,\n  latency: number,\n  queries: DataQuery[],\n  datasourceId: string\n): ThunkResult<void> {\n  return (dispatch, getState) => {\n    const { datasourceInstance, history, queryTransactions, scanner, scanning } = getState().explore[exploreId];\n\n    // If datasource already changed, results do not matter\n    if (datasourceInstance.meta.id !== datasourceId) {\n      return;\n    }\n\n    // Transaction might have been discarded\n    const transaction = queryTransactions.find(qt => qt.id === transactionId);\n    if (!transaction) {\n      return;\n    }\n\n    // Get query hints\n    let hints: QueryHint[];\n    if (datasourceInstance.getQueryHints) {\n      hints = datasourceInstance.getQueryHints(transaction.query, result);\n    }\n\n    // Mark transactions as complete and attach result\n    const nextQueryTransactions = queryTransactions.map(qt => {\n      if (qt.id === transactionId) {\n        return {\n          ...qt,\n          hints,\n          latency,\n          result,\n          done: true,\n        };\n      }\n      return qt;\n    });\n\n    // Side-effect: Saving history in localstorage\n    const nextHistory = updateHistory(history, datasourceId, queries);\n\n    dispatch(\n      queryTransactionSuccessAction({\n        exploreId,\n        history: nextHistory,\n        queryTransactions: nextQueryTransactions,\n      })\n    );\n\n    // Keep scanning for results if this was the last scanning transaction\n    if (scanning) {\n      if (_.size(result) === 0) {\n        const other = nextQueryTransactions.find(qt => qt.scanning && !qt.done);\n        if (!other) {\n          const range = scanner();\n          dispatch(scanRangeAction({ exploreId, range }));\n        }\n      } else {\n        // We can stop scanning if we have a result\n        dispatch(scanStopAction({ exploreId }));\n      }\n    }\n  };\n}\n\n/**\n * Main action to run queries and dispatches sub-actions based on which result viewers are active\n */\nexport function runQueries(exploreId: ExploreId, ignoreUIState = false) {\n  return (dispatch, getState) => {\n    const {\n      datasourceInstance,\n      queries,\n      showingLogs,\n      showingGraph,\n      showingTable,\n      supportsGraph,\n      supportsLogs,\n      supportsTable,\n    } = getState().explore[exploreId];\n\n    if (!hasNonEmptyQuery(queries)) {\n      dispatch(clearQueriesAction({ exploreId }));\n      dispatch(stateSave()); // Remember to saves to state and update location\n      return;\n    }\n\n    // Some datasource's query builders allow per-query interval limits,\n    // but we're using the datasource interval limit for now\n    const interval = datasourceInstance.interval;\n\n    dispatch(runQueriesAction());\n    // Keep table queries first since they need to return quickly\n    if ((ignoreUIState || showingTable) && supportsTable) {\n      dispatch(\n        runQueriesForType(\n          exploreId,\n          'Table',\n          {\n            interval,\n            format: 'table',\n            instant: true,\n            valueWithRefId: true,\n          },\n          data => data[0]\n        )\n      );\n    }\n    if ((ignoreUIState || showingGraph) && supportsGraph) {\n      dispatch(\n        runQueriesForType(\n          exploreId,\n          'Graph',\n          {\n            interval,\n            format: 'time_series',\n            instant: false,\n          },\n          makeTimeSeriesList\n        )\n      );\n    }\n    if ((ignoreUIState || showingLogs) && supportsLogs) {\n      dispatch(runQueriesForType(exploreId, 'Logs', { interval, format: 'logs' }));\n    }\n\n    dispatch(stateSave());\n  };\n}\n\n/**\n * Helper action to build a query transaction object and handing the query to the datasource.\n * @param exploreId Explore area\n * @param resultType Result viewer that will be associated with this query result\n * @param queryOptions Query options as required by the datasource's `query()` function.\n * @param resultGetter Optional result extractor, e.g., if the result is a list and you only need the first element.\n */\nfunction runQueriesForType(\n  exploreId: ExploreId,\n  resultType: ResultType,\n  queryOptions: QueryOptions,\n  resultGetter?: any\n) {\n  return async (dispatch, getState) => {\n    const { datasourceInstance, eventBridge, queries, queryIntervals, range, scanning } = getState().explore[exploreId];\n    const datasourceId = datasourceInstance.meta.id;\n\n    // Run all queries concurrently\n    queries.forEach(async (query, rowIndex) => {\n      const transaction = buildQueryTransaction(\n        query,\n        rowIndex,\n        resultType,\n        queryOptions,\n        range,\n        queryIntervals,\n        scanning\n      );\n      dispatch(queryTransactionStartAction({ exploreId, resultType, rowIndex, transaction }));\n      try {\n        const now = Date.now();\n        const res = await datasourceInstance.query(transaction.options);\n        eventBridge.emit('data-received', res.data || []);\n        const latency = Date.now() - now;\n        const { queryTransactions } = getState().explore[exploreId];\n        const results = resultGetter ? resultGetter(res.data, transaction, queryTransactions) : res.data;\n        dispatch(queryTransactionSuccess(exploreId, transaction.id, results, latency, queries, datasourceId));\n      } catch (response) {\n        eventBridge.emit('data-error', response);\n        dispatch(queryTransactionFailure(exploreId, transaction.id, response, datasourceId));\n      }\n    });\n  };\n}\n\n/**\n * Start a scan for more results using the given scanner.\n * @param exploreId Explore area\n * @param scanner Function that a) returns a new time range and b) triggers a query run for the new range\n */\nexport function scanStart(exploreId: ExploreId, scanner: RangeScanner): ThunkResult<void> {\n  return dispatch => {\n    // Register the scanner\n    dispatch(scanStartAction({ exploreId, scanner }));\n    // Scanning must trigger query run, and return the new range\n    const range = scanner();\n    // Set the new range to be displayed\n    dispatch(scanRangeAction({ exploreId, range }));\n  };\n}\n\n/**\n * Reset queries to the given queries. Any modifications will be discarded.\n * Use this action for clicks on query examples. Triggers a query run.\n */\nexport function setQueries(exploreId: ExploreId, rawQueries: DataQuery[]): ThunkResult<void> {\n  return (dispatch, getState) => {\n    // Inject react keys into query objects\n    const queries = rawQueries.map(q => ({ ...q, ...generateEmptyQuery(getState().explore[exploreId].queries) }));\n    dispatch(setQueriesAction({ exploreId, queries }));\n    dispatch(runQueries(exploreId));\n  };\n}\n\n/**\n * Close the split view and save URL state.\n */\nexport function splitClose(itemId: ExploreId): ThunkResult<void> {\n  return dispatch => {\n    dispatch(splitCloseAction({ itemId }));\n    dispatch(stateSave());\n  };\n}\n\n/**\n * Open the split view and copy the left state to be the right state.\n * The right state is automatically initialized.\n * The copy keeps all query modifications but wipes the query results.\n */\nexport function splitOpen(): ThunkResult<void> {\n  return (dispatch, getState) => {\n    // Clone left state to become the right state\n    const leftState = getState().explore[ExploreId.left];\n    const queryState = getState().location.query[ExploreId.left] as string;\n    const urlState = parseUrlState(queryState);\n    const itemState = {\n      ...leftState,\n      queryTransactions: [],\n      queries: leftState.queries.slice(),\n      exploreId: ExploreId.right,\n      urlState,\n    };\n    dispatch(splitOpenAction({ itemState }));\n    dispatch(stateSave());\n  };\n}\n\n/**\n * Saves Explore state to URL using the `left` and `right` parameters.\n * If split view is not active, `right` will not be set.\n */\nexport function stateSave() {\n  return (dispatch, getState) => {\n    const { left, right, split } = getState().explore;\n    const urlStates: { [index: string]: string } = {};\n    const leftUrlState: ExploreUrlState = {\n      datasource: left.datasourceInstance.name,\n      queries: left.queries.map(clearQueryKeys),\n      range: left.range,\n      ui: {\n        showingGraph: left.showingGraph,\n        showingLogs: left.showingLogs,\n        showingTable: left.showingTable,\n        dedupStrategy: left.dedupStrategy,\n      },\n    };\n    urlStates.left = serializeStateToUrlParam(leftUrlState, true);\n    if (split) {\n      const rightUrlState: ExploreUrlState = {\n        datasource: right.datasourceInstance.name,\n        queries: right.queries.map(clearQueryKeys),\n        range: right.range,\n        ui: {\n          showingGraph: right.showingGraph,\n          showingLogs: right.showingLogs,\n          showingTable: right.showingTable,\n          dedupStrategy: right.dedupStrategy,\n        },\n      };\n\n      urlStates.right = serializeStateToUrlParam(rightUrlState, true);\n    }\n\n    dispatch(updateLocation({ query: urlStates }));\n  };\n}\n\n/**\n * Creates action to collapse graph/logs/table panel. When panel is collapsed,\n * queries won't be run\n */\nconst togglePanelActionCreator = (\n  actionCreator:\n    | ActionCreator<ToggleGraphPayload>\n    | ActionCreator<ToggleLogsPayload>\n    | ActionCreator<ToggleTablePayload>\n) => (exploreId: ExploreId, isPanelVisible: boolean) => {\n  return dispatch => {\n    let uiFragmentStateUpdate: Partial<ExploreUIState>;\n    const shouldRunQueries = !isPanelVisible;\n\n    switch (actionCreator.type) {\n      case toggleGraphAction.type:\n        uiFragmentStateUpdate = { showingGraph: !isPanelVisible };\n        break;\n      case toggleLogsAction.type:\n        uiFragmentStateUpdate = { showingLogs: !isPanelVisible };\n        break;\n      case toggleTableAction.type:\n        uiFragmentStateUpdate = { showingTable: !isPanelVisible };\n        break;\n    }\n\n    dispatch(actionCreator({ exploreId }));\n    dispatch(updateExploreUIState(exploreId, uiFragmentStateUpdate));\n\n    if (shouldRunQueries) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n};\n\n/**\n * Expand/collapse the graph result viewer. When collapsed, graph queries won't be run.\n */\nexport const toggleGraph = togglePanelActionCreator(toggleGraphAction);\n\n/**\n * Expand/collapse the logs result viewer. When collapsed, log queries won't be run.\n */\nexport const toggleLogs = togglePanelActionCreator(toggleLogsAction);\n\n/**\n * Expand/collapse the table result viewer. When collapsed, table queries won't be run.\n */\nexport const toggleTable = togglePanelActionCreator(toggleTableAction);\n\n/**\n * Change logs deduplication strategy and update URL.\n */\nexport const changeDedupStrategy = (exploreId, dedupStrategy: LogsDedupStrategy) => {\n  return dispatch => {\n    dispatch(updateExploreUIState(exploreId, { dedupStrategy }));\n  };\n};\n\nexport function refreshExplore(exploreId: ExploreId): ThunkResult<void> {\n  return (dispatch, getState) => {\n    const itemState = getState().explore[exploreId];\n    if (!itemState.initialized) {\n      return;\n    }\n\n    const { urlState, update, containerWidth, eventBridge } = itemState;\n    const { datasource, queries, range, ui } = urlState;\n    const refreshQueries = queries.map(q => ({ ...q, ...generateEmptyQuery(itemState.queries) }));\n    const refreshRange = { from: parseTime(range.from), to: parseTime(range.to) };\n\n    // need to refresh datasource\n    if (update.datasource) {\n      const initialQueries = ensureQueries(queries);\n      const initialRange = { from: parseTime(range.from), to: parseTime(range.to) };\n      dispatch(initializeExplore(exploreId, datasource, initialQueries, initialRange, containerWidth, eventBridge, ui));\n      return;\n    }\n\n    if (update.range) {\n      dispatch(changeTimeAction({ exploreId, range: refreshRange as TimeRange }));\n    }\n\n    // need to refresh ui state\n    if (update.ui) {\n      dispatch(updateUIStateAction({ ...ui, exploreId }));\n    }\n\n    // need to refresh queries\n    if (update.queries) {\n      dispatch(setQueriesAction({ exploreId, queries: refreshQueries }));\n    }\n\n    // always run queries when refresh is needed\n    if (update.queries || update.ui || update.range) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n}\n","import React, { PureComponent } from 'react';\nimport moment from 'moment';\n\nimport * as dateMath from 'app/core/utils/datemath';\nimport * as rangeUtil from 'app/core/utils/rangeutil';\nimport { Input, RawTimeRange, TimeRange } from '@grafana/ui';\n\nconst DATE_FORMAT = 'YYYY-MM-DD HH:mm:ss';\nexport const DEFAULT_RANGE = {\n  from: 'now-6h',\n  to: 'now',\n};\n\n/**\n * Return a human-editable string of either relative (inludes \"now\") or absolute local time (in the shape of DATE_FORMAT).\n * @param value Epoch or relative time\n */\nexport function parseTime(value: string | moment.Moment, isUtc = false, ensureString = false): string | moment.Moment {\n  if (moment.isMoment(value)) {\n    if (ensureString) {\n      return value.format(DATE_FORMAT);\n    }\n    return value;\n  }\n  if ((value as string).indexOf('now') !== -1) {\n    return value;\n  }\n  let time: any = value;\n  // Possible epoch\n  if (!isNaN(time)) {\n    time = parseInt(time, 10);\n  }\n  time = isUtc ? moment.utc(time) : moment(time);\n  return time.format(DATE_FORMAT);\n}\n\ninterface TimePickerProps {\n  isOpen?: boolean;\n  isUtc?: boolean;\n  range?: RawTimeRange;\n  onChangeTime?: (range: RawTimeRange, scanning?: boolean) => void;\n}\n\ninterface TimePickerState {\n  isOpen: boolean;\n  isUtc: boolean;\n  rangeString: string;\n  refreshInterval?: string;\n  initialRange?: RawTimeRange;\n\n  // Input-controlled text, keep these in a shape that is human-editable\n  fromRaw: string;\n  toRaw: string;\n}\n\n/**\n * TimePicker with dropdown menu for relative dates.\n *\n * Initialize with a range that is either based on relative time strings,\n * or on Moment objects.\n * Internally the component needs to keep a string representation in `fromRaw`\n * and `toRaw` for the controlled inputs.\n * When a time is picked, `onChangeTime` is called with the new range that\n * is again based on relative time strings or Moment objects.\n */\nexport default class TimePicker extends PureComponent<TimePickerProps, TimePickerState> {\n  dropdownEl: any;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isOpen: props.isOpen,\n      isUtc: props.isUtc,\n      rangeString: '',\n      fromRaw: '',\n      toRaw: '',\n      initialRange: DEFAULT_RANGE,\n      refreshInterval: '',\n    };\n  } //Temp solution... How do detect if ds supports table format?\n\n  static getDerivedStateFromProps(props, state) {\n    if (state.initialRange && state.initialRange === props.range) {\n      return state;\n    }\n\n    const from = props.range ? props.range.from : DEFAULT_RANGE.from;\n    const to = props.range ? props.range.to : DEFAULT_RANGE.to;\n\n    // Ensure internal string format\n    const fromRaw = parseTime(from, props.isUtc, true);\n    const toRaw = parseTime(to, props.isUtc, true);\n    const range = {\n      from: fromRaw,\n      to: toRaw,\n    };\n\n    return {\n      ...state,\n      fromRaw,\n      toRaw,\n      initialRange: props.range,\n      rangeString: rangeUtil.describeTimeRange(range),\n    };\n  }\n\n  move(direction: number, scanning?: boolean): RawTimeRange {\n    const { onChangeTime } = this.props;\n    const { fromRaw, toRaw } = this.state;\n    const from = dateMath.parse(fromRaw, false);\n    const to = dateMath.parse(toRaw, true);\n    const step = scanning ? 1 : 2;\n    const timespan = (to.valueOf() - from.valueOf()) / step;\n\n    let nextTo, nextFrom;\n    if (direction === -1) {\n      nextTo = to.valueOf() - timespan;\n      nextFrom = from.valueOf() - timespan;\n    } else if (direction === 1) {\n      nextTo = to.valueOf() + timespan;\n      nextFrom = from.valueOf() + timespan;\n      if (nextTo > Date.now() && to.valueOf() < Date.now()) {\n        nextTo = Date.now();\n        nextFrom = from.valueOf();\n      }\n    } else {\n      nextTo = to.valueOf();\n      nextFrom = from.valueOf();\n    }\n\n    const nextRange = {\n      from: moment(nextFrom),\n      to: moment(nextTo),\n    };\n\n    const nextTimeRange: TimeRange = {\n      raw: nextRange,\n      from: nextRange.from,\n      to: nextRange.to,\n    };\n\n    this.setState(\n      {\n        rangeString: rangeUtil.describeTimeRange(nextRange),\n        fromRaw: nextRange.from.format(DATE_FORMAT),\n        toRaw: nextRange.to.format(DATE_FORMAT),\n      },\n      () => {\n        onChangeTime(nextTimeRange, scanning);\n      }\n    );\n\n    return nextRange;\n  }\n\n  handleChangeFrom = e => {\n    this.setState({\n      fromRaw: e.target.value,\n    });\n  };\n\n  handleChangeTo = e => {\n    this.setState({\n      toRaw: e.target.value,\n    });\n  };\n\n  handleClickApply = () => {\n    const { onChangeTime } = this.props;\n    let range;\n    this.setState(\n      state => {\n        const { toRaw, fromRaw } = this.state;\n        range = {\n          from: dateMath.parse(fromRaw, false),\n          to: dateMath.parse(toRaw, true),\n        };\n        const rangeString = rangeUtil.describeTimeRange(range);\n        return {\n          isOpen: false,\n          rangeString,\n        };\n      },\n      () => {\n        if (onChangeTime) {\n          onChangeTime(range);\n        }\n      }\n    );\n  };\n\n  handleClickLeft = () => this.move(-1);\n  handleClickPicker = () => {\n    this.setState(state => ({\n      isOpen: !state.isOpen,\n    }));\n  };\n  handleClickRight = () => this.move(1);\n  handleClickRefresh = () => {};\n  handleClickRelativeOption = range => {\n    const { onChangeTime } = this.props;\n    const rangeString = rangeUtil.describeTimeRange(range);\n    this.setState(\n      {\n        toRaw: range.to,\n        fromRaw: range.from,\n        isOpen: false,\n        rangeString,\n      },\n      () => {\n        if (onChangeTime) {\n          onChangeTime(range);\n        }\n      }\n    );\n  };\n\n  getTimeOptions() {\n    return rangeUtil.getRelativeTimesList({}, this.state.rangeString);\n  }\n\n  dropdownRef = el => {\n    this.dropdownEl = el;\n  };\n\n  renderDropdown() {\n    const { fromRaw, isOpen, toRaw } = this.state;\n    if (!isOpen) {\n      return null;\n    }\n    const timeOptions = this.getTimeOptions();\n    return (\n      <div ref={this.dropdownRef} className=\"gf-timepicker-dropdown\">\n        <div className=\"popover-box\">\n          <div className=\"popover-box__header\">\n            <span className=\"popover-box__title\">Quick ranges</span>\n          </div>\n          <div className=\"popover-box__body gf-timepicker-relative-section\">\n            {Object.keys(timeOptions).map(section => {\n              const group = timeOptions[section];\n              return (\n                <ul key={section}>\n                  {group.map(option => (\n                    <li className={option.active ? 'active' : ''} key={option.display}>\n                      <a onClick={() => this.handleClickRelativeOption(option)}>{option.display}</a>\n                    </li>\n                  ))}\n                </ul>\n              );\n            })}\n          </div>\n        </div>\n\n        <div className=\"popover-box\">\n          <div className=\"popover-box__header\">\n            <span className=\"popover-box__title\">Custom range</span>\n          </div>\n          <div className=\"popover-box__body gf-timepicker-absolute-section\">\n            <label className=\"small\">From:</label>\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form max-width-28\">\n                <Input\n                  type=\"text\"\n                  className=\"gf-form-input input-large timepicker-from\"\n                  value={fromRaw}\n                  onChange={this.handleChangeFrom}\n                />\n              </div>\n            </div>\n\n            <label className=\"small\">To:</label>\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form max-width-28\">\n                <Input\n                  type=\"text\"\n                  className=\"gf-form-input input-large timepicker-to\"\n                  value={toRaw}\n                  onChange={this.handleChangeTo}\n                />\n              </div>\n            </div>\n            <div className=\"gf-form\">\n              <button className=\"btn gf-form-btn btn-secondary\" onClick={this.handleClickApply}>\n                Apply\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const { isUtc, rangeString, refreshInterval } = this.state;\n\n    return (\n      <div className=\"timepicker\">\n        <div className=\"navbar-buttons\">\n          <button className=\"btn navbar-button navbar-button--tight timepicker-left\" onClick={this.handleClickLeft}>\n            <i className=\"fa fa-chevron-left\" />\n          </button>\n          <button className=\"btn navbar-button gf-timepicker-nav-btn\" onClick={this.handleClickPicker}>\n            <i className=\"fa fa-clock-o\" />\n            <span className=\"timepicker-rangestring\">{rangeString}</span>\n            {isUtc ? <span className=\"gf-timepicker-utc\">UTC</span> : null}\n            {refreshInterval ? <span className=\"text-warning\">&nbsp; Refresh every {refreshInterval}</span> : null}\n          </button>\n          <button className=\"btn navbar-button navbar-button--tight timepicker-right\" onClick={this.handleClickRight}>\n            <i className=\"fa fa-chevron-right\" />\n          </button>\n        </div>\n        {this.renderDropdown()}\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\n\ninterface Props {\n  isOpen: boolean;\n  label: string;\n  loading?: boolean;\n  onToggle: (isOpen: boolean) => void;\n}\n\nexport default class Panel extends PureComponent<Props> {\n  onClickToggle = () => this.props.onToggle(!this.props.isOpen);\n\n  render() {\n    const { isOpen, loading } = this.props;\n    const iconClass = isOpen ? 'fa fa-caret-up' : 'fa fa-caret-down';\n    const loaderClass = loading ? 'explore-panel__loader explore-panel__loader--active' : 'explore-panel__loader';\n    return (\n      <div className=\"explore-panel panel-container\">\n        <div className=\"explore-panel__header\" onClick={this.onClickToggle}>\n          <div className=\"explore-panel__header-buttons\">\n            <span className={iconClass} />\n          </div>\n          <div className=\"explore-panel__header-label\">{this.props.label}</div>\n        </div>\n        {isOpen && (\n          <div className=\"explore-panel__body\">\n            <div className={loaderClass} />\n            {this.props.children}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class ErrorBoundary extends Component<{}, any> {\n  constructor(props) {\n    super(props);\n    this.state = { error: null, errorInfo: null };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // Catch errors in any components below and re-render with error message\n    this.setState({\n      error: error,\n      errorInfo: errorInfo,\n    });\n  }\n\n  render() {\n    if (this.state.errorInfo) {\n      // Error path\n      return (\n        <div className=\"explore-container\">\n          <h3>An unexpected error happened.</h3>\n          <details style={{ whiteSpace: 'pre-wrap' }}>\n            {this.state.error && this.state.error.toString()}\n            <br />\n            {this.state.errorInfo.componentStack}\n          </details>\n        </div>\n      );\n    }\n    // Normally, just render children\n    return this.props.children;\n  }\n}\n","import React, { MouseEvent, PureComponent } from 'react';\nimport classNames from 'classnames';\nimport { TimeSeries } from 'app/core/core';\n\ninterface LegendProps {\n  data: TimeSeries[];\n  hiddenSeries: Set<string>;\n  onToggleSeries?: (series: TimeSeries, exclusive: boolean) => void;\n}\n\ninterface LegendItemProps {\n  hidden: boolean;\n  onClickLabel?: (series: TimeSeries, event: MouseEvent) => void;\n  series: TimeSeries;\n}\n\nclass LegendItem extends PureComponent<LegendItemProps> {\n  onClickLabel = e => this.props.onClickLabel(this.props.series, e);\n\n  render() {\n    const { hidden, series } = this.props;\n    const seriesClasses = classNames({\n      'graph-legend-series-hidden': hidden,\n    });\n    return (\n      <div className={`graph-legend-series ${seriesClasses}`}>\n        <div className=\"graph-legend-icon\">\n          <i className=\"fa fa-minus pointer\" style={{ color: series.color }} />\n        </div>\n        <a className=\"graph-legend-alias pointer\" title={series.alias} onClick={this.onClickLabel}>\n          {series.alias}\n        </a>\n      </div>\n    );\n  }\n}\n\nexport default class Legend extends PureComponent<LegendProps> {\n  static defaultProps = {\n    onToggleSeries: () => {},\n  };\n\n  onClickLabel = (series: TimeSeries, event: MouseEvent) => {\n    const { onToggleSeries } = this.props;\n    const exclusive = event.ctrlKey || event.metaKey || event.shiftKey;\n    onToggleSeries(series, !exclusive);\n  };\n\n  render() {\n    const { data, hiddenSeries } = this.props;\n    const items = data || [];\n    return (\n      <div className=\"graph-legend ps\">\n        {items.map((series, i) => (\n          <LegendItem\n            hidden={hiddenSeries.has(series.alias)}\n            // Workaround to resolve conflicts since series visibility tracks the alias property\n            key={`${series.id}-${i}`}\n            onClickLabel={this.onClickLabel}\n            series={series}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n","import $ from 'jquery';\nimport React, { PureComponent } from 'react';\nimport moment from 'moment';\n\nimport 'vendor/flot/jquery.flot';\nimport 'vendor/flot/jquery.flot.time';\nimport 'vendor/flot/jquery.flot.selection';\nimport 'vendor/flot/jquery.flot.stack';\n\nimport { RawTimeRange } from '@grafana/ui';\nimport * as dateMath from 'app/core/utils/datemath';\nimport TimeSeries from 'app/core/time_series2';\n\nimport Legend from './Legend';\nimport { equal, intersect } from './utils/set';\n\nconst MAX_NUMBER_OF_TIME_SERIES = 20;\n\n// Copied from graph.ts\nfunction time_format(ticks, min, max) {\n  if (min && max && ticks) {\n    const range = max - min;\n    const secPerTick = range / ticks / 1000;\n    const oneDay = 86400000;\n    const oneYear = 31536000000;\n\n    if (secPerTick <= 45) {\n      return '%H:%M:%S';\n    }\n    if (secPerTick <= 7200 || range <= oneDay) {\n      return '%H:%M';\n    }\n    if (secPerTick <= 80000) {\n      return '%m/%d %H:%M';\n    }\n    if (secPerTick <= 2419200 || range <= oneYear) {\n      return '%m/%d';\n    }\n    return '%Y-%m';\n  }\n\n  return '%H:%M';\n}\n\nconst FLOT_OPTIONS = {\n  legend: {\n    show: false,\n  },\n  series: {\n    lines: {\n      linewidth: 1,\n      zero: false,\n    },\n    shadowSize: 0,\n  },\n  grid: {\n    minBorderMargin: 0,\n    markings: [],\n    backgroundColor: null,\n    borderWidth: 0,\n    // hoverable: true,\n    clickable: true,\n    color: '#a1a1a1',\n    margin: { left: 0, right: 0 },\n    labelMarginX: 0,\n  },\n  selection: {\n    mode: 'x',\n    color: '#666',\n  },\n  // crosshair: {\n  //   mode: 'x',\n  // },\n};\n\ninterface GraphProps {\n  data: any[];\n  height?: number;\n  width?: number;\n  id?: string;\n  range: RawTimeRange;\n  split?: boolean;\n  userOptions?: any;\n  onChangeTime?: (range: RawTimeRange) => void;\n  onToggleSeries?: (alias: string, hiddenSeries: Set<string>) => void;\n}\n\ninterface GraphState {\n  /**\n   * Type parameter refers to the `alias` property of a `TimeSeries`.\n   * Consequently, all series sharing the same alias will share visibility state.\n   */\n  hiddenSeries: Set<string>;\n  showAllTimeSeries: boolean;\n}\n\nexport class Graph extends PureComponent<GraphProps, GraphState> {\n  $el: any;\n  dynamicOptions = null;\n\n  state = {\n    hiddenSeries: new Set(),\n    showAllTimeSeries: false,\n  };\n\n  getGraphData() {\n    const { data } = this.props;\n\n    return this.state.showAllTimeSeries ? data : data.slice(0, MAX_NUMBER_OF_TIME_SERIES);\n  }\n\n  componentDidMount() {\n    this.draw();\n    this.$el = $(`#${this.props.id}`);\n    this.$el.bind('plotselected', this.onPlotSelected);\n  }\n\n  componentDidUpdate(prevProps: GraphProps, prevState: GraphState) {\n    if (\n      prevProps.data !== this.props.data ||\n      prevProps.range !== this.props.range ||\n      prevProps.split !== this.props.split ||\n      prevProps.height !== this.props.height ||\n      prevProps.width !== this.props.width ||\n      !equal(prevState.hiddenSeries, this.state.hiddenSeries)\n    ) {\n      this.draw();\n    }\n  }\n\n  componentWillUnmount() {\n    this.$el.unbind('plotselected', this.onPlotSelected);\n  }\n\n  onPlotSelected = (event, ranges) => {\n    if (this.props.onChangeTime) {\n      const range = {\n        from: moment(ranges.xaxis.from),\n        to: moment(ranges.xaxis.to),\n      };\n      this.props.onChangeTime(range);\n    }\n  };\n\n  getDynamicOptions() {\n    const { range, width } = this.props;\n    const ticks = (width || 0) / 100;\n    let { from, to } = range;\n    if (!moment.isMoment(from)) {\n      from = dateMath.parse(from, false);\n    }\n    if (!moment.isMoment(to)) {\n      to = dateMath.parse(to, true);\n    }\n    const min = from.valueOf();\n    const max = to.valueOf();\n    return {\n      xaxis: {\n        mode: 'time',\n        min: min,\n        max: max,\n        label: 'Datetime',\n        ticks: ticks,\n        timezone: 'browser',\n        timeformat: time_format(ticks, min, max),\n      },\n    };\n  }\n\n  onShowAllTimeSeries = () => {\n    this.setState(\n      {\n        showAllTimeSeries: true,\n      },\n      this.draw\n    );\n  };\n\n  onToggleSeries = (series: TimeSeries, exclusive: boolean) => {\n    this.setState((state, props) => {\n      const { data, onToggleSeries } = props;\n      const { hiddenSeries } = state;\n\n      // Deduplicate series as visibility tracks the alias property\n      const oneSeriesVisible = hiddenSeries.size === new Set(data.map(d => d.alias)).size - 1;\n\n      let nextHiddenSeries = new Set();\n      if (exclusive) {\n        if (hiddenSeries.has(series.alias) || !oneSeriesVisible) {\n          nextHiddenSeries = new Set(data.filter(d => d.alias !== series.alias).map(d => d.alias));\n        }\n      } else {\n        // Prune hidden series no longer part of those available from the most recent query\n        const availableSeries = new Set(data.map(d => d.alias));\n        nextHiddenSeries = intersect(new Set(hiddenSeries), availableSeries);\n        if (nextHiddenSeries.has(series.alias)) {\n          nextHiddenSeries.delete(series.alias);\n        } else {\n          nextHiddenSeries.add(series.alias);\n        }\n      }\n      if (onToggleSeries) {\n        onToggleSeries(series.alias, nextHiddenSeries);\n      }\n      return {\n        hiddenSeries: nextHiddenSeries,\n      };\n    }, this.draw);\n  };\n\n  draw() {\n    const { userOptions = {} } = this.props;\n    const { hiddenSeries } = this.state;\n    const data = this.getGraphData();\n\n    const $el = $(`#${this.props.id}`);\n    let series = [{ data: [[0, 0]] }];\n\n    if (data && data.length > 0) {\n      series = data\n        .filter((ts: TimeSeries) => !hiddenSeries.has(ts.alias))\n        .map((ts: TimeSeries) => ({\n          color: ts.color,\n          label: ts.label,\n          data: ts.getFlotPairs('null'),\n        }));\n    }\n\n    this.dynamicOptions = this.getDynamicOptions();\n\n    const options = {\n      ...FLOT_OPTIONS,\n      ...this.dynamicOptions,\n      ...userOptions,\n    };\n\n    $.plot($el, series, options);\n  }\n\n  render() {\n    const { height = 100, id = 'graph' } = this.props;\n    const { hiddenSeries } = this.state;\n    const data = this.getGraphData();\n\n    return (\n      <>\n        {this.props.data && this.props.data.length > MAX_NUMBER_OF_TIME_SERIES && !this.state.showAllTimeSeries && (\n          <div className=\"time-series-disclaimer\">\n            <i className=\"fa fa-fw fa-warning disclaimer-icon\" />\n            {`Showing only ${MAX_NUMBER_OF_TIME_SERIES} time series. `}\n            <span className=\"show-all-time-series\" onClick={this.onShowAllTimeSeries}>{`Show all ${\n              this.props.data.length\n            }`}</span>\n          </div>\n        )}\n        <div id={id} className=\"explore-graph\" style={{ height }} />\n        <Legend data={data} hiddenSeries={hiddenSeries} onToggleSeries={this.onToggleSeries} />\n      </>\n    );\n  }\n}\n\nexport default Graph;\n","/**\n * Performs a shallow comparison of two sets with the same item type.\n */\nexport function equal<T>(a: Set<T>, b: Set<T>): boolean {\n  if (a.size !== b.size) {\n    return false;\n  }\n  const it = a.values();\n  while (true) {\n    const { value, done } = it.next();\n    if (done) {\n      return true;\n    }\n    if (!b.has(value)) {\n      return false;\n    }\n  }\n}\n\n/**\n * Returns a new set with items in both sets using shallow comparison.\n */\nexport function intersect<T>(a: Set<T>, b: Set<T>): Set<T> {\n  const result = new Set<T>();\n  const it = b.values();\n  while (true) {\n    const { value, done } = it.next();\n    if (done) {\n      return result;\n    }\n    if (a.has(value)) {\n      result.add(value);\n    }\n  }\n}\n","// Libraries\nimport React, { ComponentClass } from 'react';\nimport { hot } from 'react-hot-loader';\n// @ts-ignore\nimport { connect } from 'react-redux';\n// @ts-ignore\nimport _ from 'lodash';\nimport { AutoSizer } from 'react-virtualized';\n\n// Services & Utils\nimport store from 'app/core/store';\n\n// Components\nimport { Alert } from './Error';\nimport ErrorBoundary from './ErrorBoundary';\nimport GraphContainer from './GraphContainer';\nimport LogsContainer from './LogsContainer';\nimport QueryRows from './QueryRows';\nimport TableContainer from './TableContainer';\nimport TimePicker, { parseTime } from './TimePicker';\n\n// Actions\nimport {\n  changeSize,\n  changeTime,\n  initializeExplore,\n  modifyQueries,\n  scanStart,\n  setQueries,\n  refreshExplore,\n} from './state/actions';\n\n// Types\nimport { RawTimeRange, TimeRange, DataQuery, ExploreStartPageProps, ExploreDataSourceApi } from '@grafana/ui';\nimport { ExploreItemState, ExploreUrlState, RangeScanner, ExploreId, ExploreUpdateState } from 'app/types/explore';\nimport { StoreState } from 'app/types';\nimport { LAST_USED_DATASOURCE_KEY, ensureQueries, DEFAULT_RANGE, DEFAULT_UI_STATE } from 'app/core/utils/explore';\nimport { Emitter } from 'app/core/utils/emitter';\nimport { ExploreToolbar } from './ExploreToolbar';\nimport { scanStopAction } from './state/actionTypes';\n\ninterface ExploreProps {\n  StartPage?: ComponentClass<ExploreStartPageProps>;\n  changeSize: typeof changeSize;\n  changeTime: typeof changeTime;\n  datasourceError: string;\n  datasourceInstance: ExploreDataSourceApi;\n  datasourceLoading: boolean | null;\n  datasourceMissing: boolean;\n  exploreId: ExploreId;\n  initializeExplore: typeof initializeExplore;\n  initialized: boolean;\n  modifyQueries: typeof modifyQueries;\n  range: RawTimeRange;\n  update: ExploreUpdateState;\n  refreshExplore: typeof refreshExplore;\n  scanner?: RangeScanner;\n  scanning?: boolean;\n  scanRange?: RawTimeRange;\n  scanStart: typeof scanStart;\n  scanStopAction: typeof scanStopAction;\n  setQueries: typeof setQueries;\n  split: boolean;\n  showingStartPage?: boolean;\n  supportsGraph: boolean | null;\n  supportsLogs: boolean | null;\n  supportsTable: boolean | null;\n  queryKeys: string[];\n  urlState: ExploreUrlState;\n}\n\n/**\n * Explore provides an area for quick query iteration for a given datasource.\n * Once a datasource is selected it populates the query section at the top.\n * When queries are run, their results are being displayed in the main section.\n * The datasource determines what kind of query editor it brings, and what kind\n * of results viewers it supports. The state is managed entirely in Redux.\n *\n * SPLIT VIEW\n *\n * Explore can have two Explore areas side-by-side. This is handled in `Wrapper.tsx`.\n * Since there can be multiple Explores (e.g., left and right) each action needs\n * the `exploreId` as first parameter so that the reducer knows which Explore state\n * is affected.\n *\n * DATASOURCE REQUESTS\n *\n * A click on Run Query creates transactions for all DataQueries for all expanded\n * result viewers. New runs are discarding previous runs. Upon completion a transaction\n * saves the result. The result viewers construct their data from the currently existing\n * transactions.\n *\n * The result viewers determine some of the query options sent to the datasource, e.g.,\n * `format`, to indicate eventual transformations by the datasources' result transformers.\n */\nexport class Explore extends React.PureComponent<ExploreProps> {\n  el: any;\n  exploreEvents: Emitter;\n  /**\n   * Timepicker to control scanning\n   */\n  timepickerRef: React.RefObject<TimePicker>;\n\n  constructor(props: ExploreProps) {\n    super(props);\n    this.exploreEvents = new Emitter();\n    this.timepickerRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const { exploreId, urlState, initialized } = this.props;\n    const { datasource, queries, range = DEFAULT_RANGE, ui = DEFAULT_UI_STATE } = (urlState || {}) as ExploreUrlState;\n    const initialDatasource = datasource || store.get(LAST_USED_DATASOURCE_KEY);\n    const initialQueries: DataQuery[] = ensureQueries(queries);\n    const initialRange = { from: parseTime(range.from), to: parseTime(range.to) };\n    const width = this.el ? this.el.offsetWidth : 0;\n\n    // initialize the whole explore first time we mount and if browser history contains a change in datasource\n    if (!initialized) {\n      this.props.initializeExplore(\n        exploreId,\n        initialDatasource,\n        initialQueries,\n        initialRange,\n        width,\n        this.exploreEvents,\n        ui\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.exploreEvents.removeAllListeners();\n  }\n\n  componentDidUpdate(prevProps: ExploreProps) {\n    this.refreshExplore();\n  }\n\n  getRef = (el: any) => {\n    this.el = el;\n  };\n\n  onChangeTime = (range: TimeRange, changedByScanner?: boolean) => {\n    if (this.props.scanning && !changedByScanner) {\n      this.onStopScanning();\n    }\n    this.props.changeTime(this.props.exploreId, range);\n  };\n\n  // Use this in help pages to set page to a single query\n  onClickExample = (query: DataQuery) => {\n    this.props.setQueries(this.props.exploreId, [query]);\n  };\n\n  onClickLabel = (key: string, value: string) => {\n    this.onModifyQueries({ type: 'ADD_FILTER', key, value });\n  };\n\n  onModifyQueries = (action: any, index?: number) => {\n    const { datasourceInstance } = this.props;\n    if (datasourceInstance && datasourceInstance.modifyQuery) {\n      const modifier = (queries: DataQuery, modification: any) => datasourceInstance.modifyQuery(queries, modification);\n      this.props.modifyQueries(this.props.exploreId, action, index, modifier);\n    }\n  };\n\n  onResize = (size: { height: number; width: number }) => {\n    this.props.changeSize(this.props.exploreId, size);\n  };\n\n  onStartScanning = () => {\n    // Scanner will trigger a query\n    const scanner = this.scanPreviousRange;\n    this.props.scanStart(this.props.exploreId, scanner);\n  };\n\n  scanPreviousRange = (): RawTimeRange => {\n    // Calling move() on the timepicker will trigger this.onChangeTime()\n    return this.timepickerRef.current.move(-1, true);\n  };\n\n  onStopScanning = () => {\n    this.props.scanStopAction({ exploreId: this.props.exploreId });\n  };\n\n  refreshExplore = () => {\n    const { exploreId, update } = this.props;\n\n    if (update.queries || update.ui || update.range || update.datasource) {\n      this.props.refreshExplore(exploreId);\n    }\n  };\n\n  render() {\n    const {\n      StartPage,\n      datasourceInstance,\n      datasourceError,\n      datasourceLoading,\n      datasourceMissing,\n      exploreId,\n      showingStartPage,\n      split,\n      supportsGraph,\n      supportsLogs,\n      supportsTable,\n      queryKeys,\n    } = this.props;\n    const exploreClass = split ? 'explore explore-split' : 'explore';\n\n    return (\n      <div className={exploreClass} ref={this.getRef}>\n        <ExploreToolbar exploreId={exploreId} timepickerRef={this.timepickerRef} onChangeTime={this.onChangeTime} />\n        {datasourceLoading ? <div className=\"explore-container\">Loading datasource...</div> : null}\n        {datasourceMissing ? (\n          <div className=\"explore-container\">Please add a datasource that supports Explore (e.g., Prometheus).</div>\n        ) : null}\n\n        {datasourceError && (\n          <div className=\"explore-container\">\n            <Alert message={`Error connecting to datasource: ${datasourceError}`} />\n          </div>\n        )}\n\n        {datasourceInstance && !datasourceError && (\n          <div className=\"explore-container\">\n            <QueryRows exploreEvents={this.exploreEvents} exploreId={exploreId} queryKeys={queryKeys} />\n            <AutoSizer onResize={this.onResize} disableHeight>\n              {({ width }) => {\n                if (width === 0) {\n                  return null;\n                }\n\n                return (\n                  <main className=\"m-t-2\" style={{ width }}>\n                    <ErrorBoundary>\n                      {showingStartPage && <StartPage onClickExample={this.onClickExample} />}\n                      {!showingStartPage && (\n                        <>\n                          {supportsGraph && !supportsLogs && <GraphContainer width={width} exploreId={exploreId} />}\n                          {supportsTable && <TableContainer exploreId={exploreId} onClickCell={this.onClickLabel} />}\n                          {supportsLogs && (\n                            <LogsContainer\n                              width={width}\n                              exploreId={exploreId}\n                              onChangeTime={this.onChangeTime}\n                              onClickLabel={this.onClickLabel}\n                              onStartScanning={this.onStartScanning}\n                              onStopScanning={this.onStopScanning}\n                            />\n                          )}\n                        </>\n                      )}\n                    </ErrorBoundary>\n                  </main>\n                );\n              }}\n            </AutoSizer>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }: ExploreProps) {\n  const explore = state.explore;\n  const { split } = explore;\n  const item: ExploreItemState = explore[exploreId];\n  const {\n    StartPage,\n    datasourceError,\n    datasourceInstance,\n    datasourceLoading,\n    datasourceMissing,\n    initialized,\n    range,\n    showingStartPage,\n    supportsGraph,\n    supportsLogs,\n    supportsTable,\n    queryKeys,\n    urlState,\n    update,\n  } = item;\n  return {\n    StartPage,\n    datasourceError,\n    datasourceInstance,\n    datasourceLoading,\n    datasourceMissing,\n    initialized,\n    range,\n    showingStartPage,\n    split,\n    supportsGraph,\n    supportsLogs,\n    supportsTable,\n    queryKeys,\n    urlState,\n    update,\n  };\n}\n\nconst mapDispatchToProps = {\n  changeSize,\n  changeTime,\n  initializeExplore,\n  modifyQueries,\n  refreshExplore,\n  scanStart,\n  scanStopAction,\n  setQueries,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(Explore)\n);\n","import React, { FC } from 'react';\n\ninterface Props {\n  message: any;\n}\n\nexport const Alert: FC<Props> = props => {\n  const { message } = props;\n  return (\n    <div className=\"gf-form-group section\">\n      <div className=\"alert-error alert\">\n        <div className=\"alert-icon\">\n          <i className=\"fa fa-exclamation-triangle\" />\n        </div>\n        <div className=\"alert-body\">\n          <div className=\"alert-title\">{message}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { TimeRange, RawTimeRange } from '@grafana/ui';\n\nimport { ExploreId, ExploreItemState } from 'app/types/explore';\nimport { StoreState } from 'app/types';\n\nimport { toggleGraph, changeTime } from './state/actions';\nimport Graph from './Graph';\nimport Panel from './Panel';\n\ninterface GraphContainerProps {\n  exploreId: ExploreId;\n  graphResult?: any[];\n  loading: boolean;\n  range: RawTimeRange;\n  showingGraph: boolean;\n  showingTable: boolean;\n  split: boolean;\n  toggleGraph: typeof toggleGraph;\n  changeTime: typeof changeTime;\n  width: number;\n}\n\nexport class GraphContainer extends PureComponent<GraphContainerProps> {\n  onClickGraphButton = () => {\n    this.props.toggleGraph(this.props.exploreId, this.props.showingGraph);\n  };\n\n  onChangeTime = (timeRange: TimeRange) => {\n    this.props.changeTime(this.props.exploreId, timeRange);\n  };\n\n  render() {\n    const { exploreId, graphResult, loading, showingGraph, showingTable, range, split, width } = this.props;\n    const graphHeight = showingGraph && showingTable ? 200 : 400;\n\n    if (!graphResult) {\n      return null;\n    }\n\n    return (\n      <Panel label=\"Graph\" isOpen={showingGraph} loading={loading} onToggle={this.onClickGraphButton}>\n        <Graph\n          data={graphResult}\n          height={graphHeight}\n          id={`explore-graph-${exploreId}`}\n          onChangeTime={this.onChangeTime}\n          range={range}\n          split={split}\n          width={width}\n        />\n      </Panel>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }) {\n  const explore = state.explore;\n  const { split } = explore;\n  const item: ExploreItemState = explore[exploreId];\n  const { graphResult, queryTransactions, range, showingGraph, showingTable } = item;\n  const loading = queryTransactions.some(qt => qt.resultType === 'Graph' && !qt.done);\n  return { graphResult, loading, range, showingGraph, showingTable, split };\n}\n\nconst mapDispatchToProps = {\n  toggleGraph,\n  changeTime,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(GraphContainer)\n);\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { RawTimeRange, TimeRange } from '@grafana/ui';\n\nimport { ExploreId, ExploreItemState } from 'app/types/explore';\nimport { LogsModel, LogsDedupStrategy, LogLevel } from 'app/core/logs_model';\nimport { StoreState } from 'app/types';\n\nimport { toggleLogs, changeDedupStrategy } from './state/actions';\nimport Logs from './Logs';\nimport Panel from './Panel';\nimport { toggleLogLevelAction } from 'app/features/explore/state/actionTypes';\nimport { deduplicatedLogsSelector, exploreItemUIStateSelector } from 'app/features/explore/state/selectors';\n\ninterface LogsContainerProps {\n  exploreId: ExploreId;\n  loading: boolean;\n  logsHighlighterExpressions?: string[];\n  logsResult?: LogsModel;\n  dedupedResult?: LogsModel;\n  onChangeTime: (range: TimeRange) => void;\n  onClickLabel: (key: string, value: string) => void;\n  onStartScanning: () => void;\n  onStopScanning: () => void;\n  range: RawTimeRange;\n  scanning?: boolean;\n  scanRange?: RawTimeRange;\n  showingLogs: boolean;\n  toggleLogs: typeof toggleLogs;\n  toggleLogLevelAction: typeof toggleLogLevelAction;\n  changeDedupStrategy: typeof changeDedupStrategy;\n  dedupStrategy: LogsDedupStrategy;\n  hiddenLogLevels: Set<LogLevel>;\n  width: number;\n}\n\nexport class LogsContainer extends PureComponent<LogsContainerProps> {\n  onClickLogsButton = () => {\n    this.props.toggleLogs(this.props.exploreId, this.props.showingLogs);\n  };\n\n  handleDedupStrategyChange = (dedupStrategy: LogsDedupStrategy) => {\n    this.props.changeDedupStrategy(this.props.exploreId, dedupStrategy);\n  };\n\n  hangleToggleLogLevel = (hiddenLogLevels: Set<LogLevel>) => {\n    const { exploreId } = this.props;\n    this.props.toggleLogLevelAction({\n      exploreId,\n      hiddenLogLevels,\n    });\n  };\n\n  render() {\n    const {\n      exploreId,\n      loading,\n      logsHighlighterExpressions,\n      logsResult,\n      dedupedResult,\n      onChangeTime,\n      onClickLabel,\n      onStartScanning,\n      onStopScanning,\n      range,\n      showingLogs,\n      scanning,\n      scanRange,\n      width,\n      hiddenLogLevels,\n    } = this.props;\n\n    return (\n      <Panel label=\"Logs\" loading={loading} isOpen={showingLogs} onToggle={this.onClickLogsButton}>\n        <Logs\n          dedupStrategy={this.props.dedupStrategy || LogsDedupStrategy.none}\n          data={logsResult}\n          dedupedData={dedupedResult}\n          exploreId={exploreId}\n          key={logsResult && logsResult.id}\n          highlighterExpressions={logsHighlighterExpressions}\n          loading={loading}\n          onChangeTime={onChangeTime}\n          onClickLabel={onClickLabel}\n          onStartScanning={onStartScanning}\n          onStopScanning={onStopScanning}\n          onDedupStrategyChange={this.handleDedupStrategyChange}\n          onToggleLogLevel={this.hangleToggleLogLevel}\n          range={range}\n          scanning={scanning}\n          scanRange={scanRange}\n          width={width}\n          hiddenLogLevels={hiddenLogLevels}\n        />\n      </Panel>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }) {\n  const explore = state.explore;\n  const item: ExploreItemState = explore[exploreId];\n  const { logsHighlighterExpressions, logsResult, queryTransactions, scanning, scanRange, range } = item;\n  const loading = queryTransactions.some(qt => qt.resultType === 'Logs' && !qt.done);\n  const { showingLogs, dedupStrategy } = exploreItemUIStateSelector(item);\n  const hiddenLogLevels = new Set(item.hiddenLogLevels);\n  const dedupedResult = deduplicatedLogsSelector(item);\n\n  return {\n    loading,\n    logsHighlighterExpressions,\n    logsResult,\n    scanning,\n    scanRange,\n    showingLogs,\n    range,\n    dedupStrategy,\n    hiddenLogLevels,\n    dedupedResult,\n  };\n}\n\nconst mapDispatchToProps = {\n  toggleLogs,\n  changeDedupStrategy,\n  toggleLogLevelAction,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(LogsContainer)\n);\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Components\nimport QueryRow from './QueryRow';\n\n// Types\nimport { Emitter } from 'app/core/utils/emitter';\nimport { ExploreId } from 'app/types/explore';\n\ninterface QueryRowsProps {\n  className?: string;\n  exploreEvents: Emitter;\n  exploreId: ExploreId;\n  queryKeys: string[];\n}\n\nexport default class QueryRows extends PureComponent<QueryRowsProps> {\n  render() {\n    const { className = '', exploreEvents, exploreId, queryKeys } = this.props;\n    return (\n      <div className={className}>\n        {queryKeys.map((key, index) => {\n          return <QueryRow key={key} exploreEvents={exploreEvents} exploreId={exploreId} index={index} />;\n        })}\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport _ from 'lodash';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\n\n// Components\nimport QueryEditor from './QueryEditor';\nimport QueryTransactionStatus from './QueryTransactionStatus';\n\n// Actions\nimport { changeQuery, modifyQueries, runQueries, addQueryRow } from './state/actions';\n\n// Types\nimport { StoreState } from 'app/types';\nimport { RawTimeRange, DataQuery, ExploreDataSourceApi, QueryHint, QueryFixAction } from '@grafana/ui';\nimport { QueryTransaction, HistoryItem, ExploreItemState, ExploreId } from 'app/types/explore';\nimport { Emitter } from 'app/core/utils/emitter';\nimport { highlightLogsExpressionAction, removeQueryRowAction } from './state/actionTypes';\n\nfunction getFirstHintFromTransactions(transactions: QueryTransaction[]): QueryHint {\n  const transaction = transactions.find(qt => qt.hints && qt.hints.length > 0);\n  if (transaction) {\n    return transaction.hints[0];\n  }\n  return undefined;\n}\n\ninterface QueryRowProps {\n  addQueryRow: typeof addQueryRow;\n  changeQuery: typeof changeQuery;\n  className?: string;\n  exploreId: ExploreId;\n  datasourceInstance: ExploreDataSourceApi;\n  highlightLogsExpressionAction: typeof highlightLogsExpressionAction;\n  history: HistoryItem[];\n  index: number;\n  query: DataQuery;\n  modifyQueries: typeof modifyQueries;\n  queryTransactions: QueryTransaction[];\n  exploreEvents: Emitter;\n  range: RawTimeRange;\n  removeQueryRowAction: typeof removeQueryRowAction;\n  runQueries: typeof runQueries;\n}\n\nexport class QueryRow extends PureComponent<QueryRowProps> {\n  onExecuteQuery = () => {\n    const { exploreId } = this.props;\n    this.props.runQueries(exploreId);\n  };\n\n  onChangeQuery = (query: DataQuery, override?: boolean) => {\n    const { datasourceInstance, exploreId, index } = this.props;\n    this.props.changeQuery(exploreId, query, index, override);\n    if (query && !override && datasourceInstance.getHighlighterExpression && index === 0) {\n      // Live preview of log search matches. Only use on first row for now\n      this.updateLogsHighlights(query);\n    }\n  };\n\n  componentWillUnmount() {\n    console.log('QueryRow will unmount');\n  }\n\n  onClickAddButton = () => {\n    const { exploreId, index } = this.props;\n    this.props.addQueryRow(exploreId, index);\n  };\n\n  onClickClearButton = () => {\n    this.onChangeQuery(null, true);\n  };\n\n  onClickHintFix = (action: QueryFixAction) => {\n    const { datasourceInstance, exploreId, index } = this.props;\n    if (datasourceInstance && datasourceInstance.modifyQuery) {\n      const modifier = (queries: DataQuery, action: QueryFixAction) => datasourceInstance.modifyQuery(queries, action);\n      this.props.modifyQueries(exploreId, action, index, modifier);\n    }\n  };\n\n  onClickRemoveButton = () => {\n    const { exploreId, index } = this.props;\n    this.props.removeQueryRowAction({ exploreId, index });\n  };\n\n  updateLogsHighlights = _.debounce((value: DataQuery) => {\n    const { datasourceInstance } = this.props;\n    if (datasourceInstance.getHighlighterExpression) {\n      const { exploreId } = this.props;\n      const expressions = [datasourceInstance.getHighlighterExpression(value)];\n      this.props.highlightLogsExpressionAction({ exploreId, expressions });\n    }\n  }, 500);\n\n  render() {\n    const { datasourceInstance, history, index, query, queryTransactions, exploreEvents, range } = this.props;\n    const transactions = queryTransactions.filter(t => t.rowIndex === index);\n    const transactionWithError = transactions.find(t => t.error !== undefined);\n    const hint = getFirstHintFromTransactions(transactions);\n    const queryError = transactionWithError ? transactionWithError.error : null;\n    const QueryField = datasourceInstance.pluginExports.ExploreQueryField;\n    return (\n      <div className=\"query-row\">\n        <div className=\"query-row-status\">\n          <QueryTransactionStatus transactions={transactions} />\n        </div>\n        <div className=\"query-row-field flex-shrink-1\">\n          {QueryField ? (\n            <QueryField\n              datasource={datasourceInstance}\n              query={query}\n              error={queryError}\n              hint={hint}\n              history={history}\n              onExecuteQuery={this.onExecuteQuery}\n              onExecuteHint={this.onClickHintFix}\n              onQueryChange={this.onChangeQuery}\n            />\n          ) : (\n            <QueryEditor\n              datasource={datasourceInstance}\n              error={queryError}\n              onQueryChange={this.onChangeQuery}\n              onExecuteQuery={this.onExecuteQuery}\n              initialQuery={query}\n              exploreEvents={exploreEvents}\n              range={range}\n            />\n          )}\n        </div>\n        <div className=\"gf-form-inline flex-shrink-0\">\n          <div className=\"gf-form\">\n            <button className=\"gf-form-label gf-form-label--btn\" onClick={this.onClickClearButton}>\n              <i className=\"fa fa-times\" />\n            </button>\n          </div>\n          <div className=\"gf-form\">\n            <button className=\"gf-form-label gf-form-label--btn\" onClick={this.onClickAddButton}>\n              <i className=\"fa fa-plus\" />\n            </button>\n          </div>\n          <div className=\"gf-form\">\n            <button className=\"gf-form-label gf-form-label--btn\" onClick={this.onClickRemoveButton}>\n              <i className=\"fa fa-minus\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId, index }) {\n  const explore = state.explore;\n  const item: ExploreItemState = explore[exploreId];\n  const { datasourceInstance, history, queries, queryTransactions, range } = item;\n  const query = queries[index];\n  return { datasourceInstance, history, query, queryTransactions, range };\n}\n\nconst mapDispatchToProps = {\n  addQueryRow,\n  changeQuery,\n  highlightLogsExpressionAction,\n  modifyQueries,\n  removeQueryRowAction,\n  runQueries,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(QueryRow)\n);\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Services\nimport { getAngularLoader, AngularComponent } from 'app/core/services/AngularLoader';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\n\n// Types\nimport { Emitter } from 'app/core/utils/emitter';\nimport { RawTimeRange, DataQuery } from '@grafana/ui';\nimport 'app/features/plugins/plugin_loader';\n\ninterface QueryEditorProps {\n  datasource: any;\n  error?: string | JSX.Element;\n  onExecuteQuery?: () => void;\n  onQueryChange?: (value: DataQuery) => void;\n  initialQuery: DataQuery;\n  exploreEvents: Emitter;\n  range: RawTimeRange;\n}\n\nexport default class QueryEditor extends PureComponent<QueryEditorProps, any> {\n  element: any;\n  component: AngularComponent;\n\n  async componentDidMount() {\n    if (!this.element) {\n      return;\n    }\n\n    const { datasource, initialQuery, exploreEvents, range } = this.props;\n    this.initTimeSrv(range);\n\n    const loader = getAngularLoader();\n    const template = '<plugin-component type=\"query-ctrl\"> </plugin-component>';\n    const target = { datasource: datasource.name, ...initialQuery };\n    const scopeProps = {\n      ctrl: {\n        datasource,\n        target,\n        refresh: () => {\n          this.props.onQueryChange(target);\n          this.props.onExecuteQuery();\n        },\n        onQueryChange: () => {\n          this.props.onQueryChange(target);\n        },\n        events: exploreEvents,\n        panel: { datasource, targets: [target] },\n        dashboard: {},\n      },\n    };\n\n    this.component = loader.load(this.element, scopeProps, template);\n    this.props.onQueryChange(target);\n  }\n\n  componentWillUnmount() {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n\n  initTimeSrv(range) {\n    const timeSrv = getTimeSrv();\n    timeSrv.init({\n      time: range,\n      refresh: false,\n      getTimezone: () => 'utc',\n      timeRangeUpdated: () => console.log('refreshDashboard!'),\n    });\n  }\n\n  render() {\n    return <div className=\"gf-form-query\" ref={element => (this.element = element)} style={{ width: '100%' }} />;\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\n\nimport { ExploreId, ExploreItemState } from 'app/types/explore';\nimport { StoreState } from 'app/types';\n\nimport { toggleTable } from './state/actions';\nimport Table from './Table';\nimport Panel from './Panel';\nimport TableModel from 'app/core/table_model';\n\ninterface TableContainerProps {\n  exploreId: ExploreId;\n  loading: boolean;\n  onClickCell: (key: string, value: string) => void;\n  showingTable: boolean;\n  tableResult?: TableModel;\n  toggleTable: typeof toggleTable;\n}\n\nexport class TableContainer extends PureComponent<TableContainerProps> {\n  onClickTableButton = () => {\n    this.props.toggleTable(this.props.exploreId, this.props.showingTable);\n  };\n\n  render() {\n    const { loading, onClickCell, showingTable, tableResult } = this.props;\n\n    if (!tableResult) {\n      return null;\n    }\n\n    return (\n      <Panel label=\"Table\" loading={loading} isOpen={showingTable} onToggle={this.onClickTableButton}>\n        <Table data={tableResult} loading={loading} onClickCell={onClickCell} />\n      </Panel>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }) {\n  const explore = state.explore;\n  const item: ExploreItemState = explore[exploreId];\n  const { queryTransactions, showingTable, tableResult } = item;\n  const loading = queryTransactions.some(qt => qt.resultType === 'Table' && !qt.done);\n  return { loading, showingTable, tableResult };\n}\n\nconst mapDispatchToProps = {\n  toggleTable,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(TableContainer)\n);\n","import _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport ReactTable from 'react-table';\n\nimport TableModel from 'app/core/table_model';\n\nconst EMPTY_TABLE = new TableModel();\n// Identify columns that contain values\nconst VALUE_REGEX = /^[Vv]alue #\\d+/;\n\ninterface TableProps {\n  data: TableModel;\n  loading: boolean;\n  onClickCell?: (columnKey: string, rowValue: string) => void;\n}\n\nfunction prepareRows(rows, columnNames) {\n  return rows.map(cells => _.zipObject(columnNames, cells));\n}\n\nexport default class Table extends PureComponent<TableProps> {\n  getCellProps = (state, rowInfo, column) => {\n    return {\n      onClick: (e: React.SyntheticEvent) => {\n        // Only handle click on link, not the cell\n        if (e.target) {\n          const link = e.target as HTMLElement;\n          if (link.className === 'link') {\n            const columnKey = column.Header;\n            const rowValue = rowInfo.row[columnKey];\n            this.props.onClickCell(columnKey, rowValue);\n          }\n        }\n      },\n    };\n  };\n\n  render() {\n    const { data, loading } = this.props;\n    const tableModel = data || EMPTY_TABLE;\n    const columnNames = tableModel.columns.map(({ text }) => text);\n    const columns = tableModel.columns.map(({ filterable, text }) => ({\n      Header: () => <span title={text}>{text}</span>,\n      accessor: text,\n      className: VALUE_REGEX.test(text) ? 'text-right' : '',\n      show: text !== 'Time',\n      Cell: row => (\n        <span className={filterable ? 'link' : ''} title={text + ': ' + row.value}>\n          {row.value}\n        </span>\n      ),\n    }));\n    const noDataText = data ? 'The queries returned no data for a table.' : '';\n\n    return (\n      <ReactTable\n        columns={columns}\n        data={tableModel.rows}\n        getTdProps={this.getCellProps}\n        loading={loading}\n        minRows={0}\n        noDataText={noDataText}\n        resolveData={data => prepareRows(data, columnNames)}\n        showPagination={Boolean(data)}\n      />\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { hot } from 'react-hot-loader';\n\nimport { ExploreId } from 'app/types/explore';\nimport { DataSourceSelectItem, RawTimeRange, TimeRange } from '@grafana/ui';\nimport { DataSourcePicker } from 'app/core/components/Select/DataSourcePicker';\nimport { StoreState } from 'app/types/store';\nimport { changeDatasource, clearQueries, splitClose, runQueries, splitOpen } from './state/actions';\nimport TimePicker from './TimePicker';\nimport { ClickOutsideWrapper } from 'app/core/components/ClickOutsideWrapper/ClickOutsideWrapper';\n\nenum IconSide {\n  left = 'left',\n  right = 'right',\n}\n\nconst createResponsiveButton = (options: {\n  splitted: boolean;\n  title: string;\n  onClick: () => void;\n  buttonClassName?: string;\n  iconClassName?: string;\n  iconSide?: IconSide;\n}) => {\n  const defaultOptions = {\n    iconSide: IconSide.left,\n  };\n  const props = { ...options, defaultOptions };\n  const { title, onClick, buttonClassName, iconClassName, splitted, iconSide } = props;\n\n  return (\n    <button className={`btn navbar-button ${buttonClassName ? buttonClassName : ''}`} onClick={onClick}>\n      {iconClassName && iconSide === IconSide.left ? <i className={`${iconClassName} icon-margin-right`} /> : null}\n      <span className=\"btn-title\">{!splitted ? title : ''}</span>\n      {iconClassName && iconSide === IconSide.right ? <i className={`${iconClassName} icon-margin-left`} /> : null}\n    </button>\n  );\n};\n\ninterface OwnProps {\n  exploreId: ExploreId;\n  timepickerRef: React.RefObject<TimePicker>;\n  onChangeTime: (range: TimeRange, changedByScanner?: boolean) => void;\n}\n\ninterface StateProps {\n  datasourceMissing: boolean;\n  exploreDatasources: DataSourceSelectItem[];\n  loading: boolean;\n  range: RawTimeRange;\n  selectedDatasource: DataSourceSelectItem;\n  splitted: boolean;\n}\n\ninterface DispatchProps {\n  changeDatasource: typeof changeDatasource;\n  clearAll: typeof clearQueries;\n  runQuery: typeof runQueries;\n  closeSplit: typeof splitClose;\n  split: typeof splitOpen;\n}\n\ntype Props = StateProps & DispatchProps & OwnProps;\n\nexport class UnConnectedExploreToolbar extends PureComponent<Props, {}> {\n  constructor(props) {\n    super(props);\n  }\n\n  onChangeDatasource = async option => {\n    this.props.changeDatasource(this.props.exploreId, option.value);\n  };\n\n  onClearAll = () => {\n    this.props.clearAll(this.props.exploreId);\n  };\n\n  onRunQuery = () => {\n    this.props.runQuery(this.props.exploreId);\n  };\n\n  onCloseTimePicker = () => {\n    this.props.timepickerRef.current.setState({ isOpen: false });\n  };\n\n  render() {\n    const {\n      datasourceMissing,\n      exploreDatasources,\n      exploreId,\n      loading,\n      range,\n      selectedDatasource,\n      splitted,\n      timepickerRef,\n    } = this.props;\n\n    return (\n      <div className={splitted ? 'explore-toolbar splitted' : 'explore-toolbar'}>\n        <div className=\"explore-toolbar-item\">\n          <div className=\"explore-toolbar-header\">\n            <div className=\"explore-toolbar-header-title\">\n              {exploreId === 'left' && (\n                <span className=\"navbar-page-btn\">\n                  <i className=\"gicon gicon-explore\" />\n                  Explore\n                </span>\n              )}\n            </div>\n            {splitted && (\n              <a className=\"explore-toolbar-header-close\" onClick={() => this.props.closeSplit(exploreId)}>\n                <i className=\"fa fa-times fa-fw\" />\n              </a>\n            )}\n          </div>\n        </div>\n        <div className=\"explore-toolbar-item\">\n          <div className=\"explore-toolbar-content\">\n            {!datasourceMissing ? (\n              <div className=\"explore-toolbar-content-item\">\n                <div className=\"datasource-picker\">\n                  <DataSourcePicker\n                    onChange={this.onChangeDatasource}\n                    datasources={exploreDatasources}\n                    current={selectedDatasource}\n                  />\n                </div>\n              </div>\n            ) : null}\n            {exploreId === 'left' && !splitted ? (\n              <div className=\"explore-toolbar-content-item\">\n                {createResponsiveButton({\n                  splitted,\n                  title: 'Split',\n                  onClick: this.props.split,\n                  iconClassName: 'fa fa-fw fa-columns icon-margin-right',\n                  iconSide: IconSide.left,\n                })}\n              </div>\n            ) : null}\n            <div className=\"explore-toolbar-content-item timepicker\">\n              <ClickOutsideWrapper onClick={this.onCloseTimePicker}>\n                <TimePicker ref={timepickerRef} range={range} onChangeTime={this.props.onChangeTime} />\n              </ClickOutsideWrapper>\n            </div>\n            <div className=\"explore-toolbar-content-item\">\n              <button className=\"btn navbar-button navbar-button--no-icon\" onClick={this.onClearAll}>\n                Clear All\n              </button>\n            </div>\n            <div className=\"explore-toolbar-content-item\">\n              {createResponsiveButton({\n                splitted,\n                title: 'Run Query',\n                onClick: this.onRunQuery,\n                buttonClassName: 'navbar-button--secondary',\n                iconClassName: loading ? 'fa fa-spinner fa-fw fa-spin run-icon' : 'fa fa-level-down fa-fw run-icon',\n                iconSide: IconSide.right,\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState, { exploreId }: OwnProps): StateProps => {\n  const splitted = state.explore.split;\n  const exploreItem = state.explore[exploreId];\n  const { datasourceInstance, datasourceMissing, exploreDatasources, queryTransactions, range } = exploreItem;\n  const selectedDatasource = datasourceInstance\n    ? exploreDatasources.find(datasource => datasource.name === datasourceInstance.name)\n    : undefined;\n  const loading = queryTransactions.some(qt => !qt.done);\n\n  return {\n    datasourceMissing,\n    exploreDatasources,\n    loading,\n    range,\n    selectedDatasource,\n    splitted,\n  };\n};\n\nconst mapDispatchToProps: DispatchProps = {\n  changeDatasource,\n  clearAll: clearQueries,\n  runQuery: runQueries,\n  closeSplit: splitClose,\n  split: splitOpen,\n};\n\nexport const ExploreToolbar = hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(UnConnectedExploreToolbar)\n);\n","import React, { FC, ReactNode, PureComponent } from 'react';\nimport { Tooltip } from '@grafana/ui';\n\ninterface ToggleButtonGroupProps {\n  label?: string;\n  children: JSX.Element[];\n  transparent?: boolean;\n}\n\nexport default class ToggleButtonGroup extends PureComponent<ToggleButtonGroupProps> {\n  render() {\n    const { children, label, transparent } = this.props;\n\n    return (\n      <div className=\"gf-form\">\n        {label && <label className={`gf-form-label ${transparent ? 'gf-form-label--transparent' : ''}`}>{label}</label>}\n        <div className={`toggle-button-group ${transparent ? 'toggle-button-group--transparent' : ''}`}>{children}</div>\n      </div>\n    );\n  }\n}\n\ninterface ToggleButtonProps {\n  onChange?: (value) => void;\n  selected?: boolean;\n  value: any;\n  className?: string;\n  children: ReactNode;\n  tooltip?: string;\n}\n\nexport const ToggleButton: FC<ToggleButtonProps> = ({\n  children,\n  selected,\n  className = '',\n  value = null,\n  tooltip,\n  onChange,\n}) => {\n  const onClick = event => {\n    event.stopPropagation();\n    if (onChange) {\n      onChange(value);\n    }\n  };\n\n  const btnClassName = `btn ${className} ${selected ? 'active' : ''}`;\n  const button = (\n    <button className={btnClassName} onClick={onClick}>\n      <span>{children}</span>\n    </button>\n  );\n\n  if (tooltip) {\n    return (\n      <Tooltip content={tooltip} placement=\"bottom\">\n        {button}\n      </Tooltip>\n    );\n  } else {\n    return button;\n  }\n};\n","import React, { PureComponent } from 'react';\nimport classnames from 'classnames';\nimport { LogLabelStatsModel } from 'app/core/logs_model';\n\nfunction LogLabelStatsRow(logLabelStatsModel: LogLabelStatsModel) {\n  const { active, count, proportion, value } = logLabelStatsModel;\n  const percent = `${Math.round(proportion * 100)}%`;\n  const barStyle = { width: percent };\n  const className = classnames('logs-stats-row', { 'logs-stats-row--active': active });\n\n  return (\n    <div className={className}>\n      <div className=\"logs-stats-row__label\">\n        <div className=\"logs-stats-row__value\" title={value}>\n          {value}\n        </div>\n        <div className=\"logs-stats-row__count\">{count}</div>\n        <div className=\"logs-stats-row__percent\">{percent}</div>\n      </div>\n      <div className=\"logs-stats-row__bar\">\n        <div className=\"logs-stats-row__innerbar\" style={barStyle} />\n      </div>\n    </div>\n  );\n}\n\nconst STATS_ROW_LIMIT = 5;\n\ninterface Props {\n  stats: LogLabelStatsModel[];\n  label: string;\n  value: string;\n  rowCount: number;\n  onClickClose: () => void;\n}\n\nexport class LogLabelStats extends PureComponent<Props> {\n  render() {\n    const { label, rowCount, stats, value, onClickClose } = this.props;\n    const topRows = stats.slice(0, STATS_ROW_LIMIT);\n    let activeRow = topRows.find(row => row.value === value);\n    let otherRows = stats.slice(STATS_ROW_LIMIT);\n    const insertActiveRow = !activeRow;\n\n    // Remove active row from other to show extra\n    if (insertActiveRow) {\n      activeRow = otherRows.find(row => row.value === value);\n      otherRows = otherRows.filter(row => row.value !== value);\n    }\n\n    const otherCount = otherRows.reduce((sum, row) => sum + row.count, 0);\n    const topCount = topRows.reduce((sum, row) => sum + row.count, 0);\n    const total = topCount + otherCount;\n    const otherProportion = otherCount / total;\n\n    return (\n      <div className=\"logs-stats\">\n        <div className=\"logs-stats__header\">\n          <span className=\"logs-stats__title\">\n            {label}: {total} of {rowCount} rows have that label\n          </span>\n          <span className=\"logs-stats__close fa fa-remove\" onClick={onClickClose} />\n        </div>\n        <div className=\"logs-stats__body\">\n          {topRows.map(stat => (\n            <LogLabelStatsRow key={stat.value} {...stat} active={stat.value === value} />\n          ))}\n          {insertActiveRow && activeRow && <LogLabelStatsRow key={activeRow.value} {...activeRow} active />}\n          {otherCount > 0 && (\n            <LogLabelStatsRow key=\"__OTHERS__\" count={otherCount} value=\"Other\" proportion={otherProportion} />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\n\nimport { calculateLogsLabelStats, LogLabelStatsModel, LogRowModel } from 'app/core/logs_model';\nimport { LogLabelStats } from './LogLabelStats';\n\ninterface Props {\n  getRows?: () => LogRowModel[];\n  label: string;\n  plain?: boolean;\n  value: string;\n  onClickLabel?: (label: string, value: string) => void;\n}\n\ninterface State {\n  showStats: boolean;\n  stats: LogLabelStatsModel[];\n}\n\nexport class LogLabel extends PureComponent<Props, State> {\n  state = {\n    stats: null,\n    showStats: false,\n  };\n\n  onClickClose = () => {\n    this.setState({ showStats: false });\n  };\n\n  onClickLabel = () => {\n    const { onClickLabel, label, value } = this.props;\n    if (onClickLabel) {\n      onClickLabel(label, value);\n    }\n  };\n\n  onClickStats = () => {\n    this.setState(state => {\n      if (state.showStats) {\n        return { showStats: false, stats: null };\n      }\n      const allRows = this.props.getRows();\n      const stats = calculateLogsLabelStats(allRows, this.props.label);\n      return { showStats: true, stats };\n    });\n  };\n\n  render() {\n    const { getRows, label, plain, value } = this.props;\n    const { showStats, stats } = this.state;\n    const tooltip = `${label}: ${value}`;\n    return (\n      <span className=\"logs-label\">\n        <span className=\"logs-label__value\" title={tooltip}>\n          {value}\n        </span>\n        {!plain && (\n          <span title=\"Filter for label\" onClick={this.onClickLabel} className=\"logs-label__icon fa fa-search-plus\" />\n        )}\n        {!plain && getRows && <span onClick={this.onClickStats} className=\"logs-label__icon fa fa-signal\" />}\n        {showStats && (\n          <span className=\"logs-label__stats\">\n            <LogLabelStats\n              stats={stats}\n              rowCount={getRows().length}\n              label={label}\n              value={value}\n              onClickClose={this.onClickClose}\n            />\n          </span>\n        )}\n      </span>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\n\nimport { LogsStreamLabels, LogRowModel } from 'app/core/logs_model';\nimport { LogLabel } from './LogLabel';\n\ninterface Props {\n  getRows?: () => LogRowModel[];\n  labels: LogsStreamLabels;\n  plain?: boolean;\n  onClickLabel?: (label: string, value: string) => void;\n}\n\nexport class LogLabels extends PureComponent<Props> {\n  render() {\n    const { getRows, labels, onClickLabel, plain } = this.props;\n    return (\n      <span className=\"logs-labels\">\n        {Object.keys(labels).map(key => (\n          <LogLabel\n            key={key}\n            getRows={getRows}\n            label={key}\n            value={labels[key]}\n            plain={plain}\n            onClickLabel={onClickLabel}\n          />\n        ))}\n      </span>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport ansicolor from 'vendor/ansicolor/ansicolor';\n\ninterface Style {\n  [key: string]: string;\n}\n\ninterface ParsedChunk {\n  style: Style;\n  text: string;\n}\n\nfunction convertCSSToStyle(css: string): Style {\n  return css.split(/;\\s*/).reduce((accumulated, line) => {\n    const match = line.match(/([^:\\s]+)\\s*:\\s*(.+)/);\n\n    if (match && match[1] && match[2]) {\n      const key = match[1].replace(/-(a-z)/g, (_, character) => character.toUpperCase());\n      accumulated[key] = match[2];\n    }\n\n    return accumulated;\n  }, {});\n}\n\ninterface Props {\n  value: string;\n}\n\ninterface State {\n  chunks: ParsedChunk[];\n  prevValue: string;\n}\n\nexport class LogMessageAnsi extends PureComponent<Props, State> {\n  state = {\n    chunks: [],\n    prevValue: '',\n  };\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (props.value === state.prevValue) {\n      return null;\n    }\n\n    const parsed = ansicolor.parse(props.value);\n\n    return {\n      chunks: parsed.spans.map(span => {\n        return span.css\n          ? {\n              style: convertCSSToStyle(span.css),\n              text: span.text,\n            }\n          : { text: span.text };\n      }),\n      prevValue: props.value,\n    };\n  }\n\n  render() {\n    const { chunks } = this.state;\n\n    return chunks.map((chunk, index) =>\n      chunk.style ? (\n        <span key={index} style={chunk.style}>\n          {chunk.text}\n        </span>\n      ) : (\n        chunk.text\n      )\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport _ from 'lodash';\nimport Highlighter from 'react-highlight-words';\nimport classnames from 'classnames';\n\nimport { LogRowModel, LogLabelStatsModel, LogsParser, calculateFieldStats, getParser } from 'app/core/logs_model';\nimport { LogLabels } from './LogLabels';\nimport { findHighlightChunksInText } from 'app/core/utils/text';\nimport { LogLabelStats } from './LogLabelStats';\nimport { LogMessageAnsi } from './LogMessageAnsi';\n\ninterface Props {\n  highlighterExpressions?: string[];\n  row: LogRowModel;\n  showDuplicates: boolean;\n  showLabels: boolean;\n  showLocalTime: boolean;\n  showUtc: boolean;\n  getRows: () => LogRowModel[];\n  onClickLabel?: (label: string, value: string) => void;\n}\n\ninterface State {\n  fieldCount: number;\n  fieldLabel: string;\n  fieldStats: LogLabelStatsModel[];\n  fieldValue: string;\n  parsed: boolean;\n  parser?: LogsParser;\n  parsedFieldHighlights: string[];\n  showFieldStats: boolean;\n}\n\n/**\n * Renders a highlighted field.\n * When hovering, a stats icon is shown.\n */\nconst FieldHighlight = onClick => props => {\n  return (\n    <span className={props.className} style={props.style}>\n      {props.children}\n      <span className=\"logs-row__field-highlight--icon fa fa-signal\" onClick={() => onClick(props.children)} />\n    </span>\n  );\n};\n\n/**\n * Renders a log line.\n *\n * When user hovers over it for a certain time, it lazily parses the log line.\n * Once a parser is found, it will determine fields, that will be highlighted.\n * When the user requests stats for a field, they will be calculated and rendered below the row.\n */\nexport class LogRow extends PureComponent<Props, State> {\n  mouseMessageTimer: NodeJS.Timer;\n\n  state = {\n    fieldCount: 0,\n    fieldLabel: null,\n    fieldStats: null,\n    fieldValue: null,\n    parsed: false,\n    parser: undefined,\n    parsedFieldHighlights: [],\n    showFieldStats: false,\n  };\n\n  componentWillUnmount() {\n    clearTimeout(this.mouseMessageTimer);\n  }\n\n  onClickClose = () => {\n    this.setState({ showFieldStats: false });\n  };\n\n  onClickHighlight = (fieldText: string) => {\n    const { getRows } = this.props;\n    const { parser } = this.state;\n    const allRows = getRows();\n\n    // Build value-agnostic row matcher based on the field label\n    const fieldLabel = parser.getLabelFromField(fieldText);\n    const fieldValue = parser.getValueFromField(fieldText);\n    const matcher = parser.buildMatcher(fieldLabel);\n    const fieldStats = calculateFieldStats(allRows, matcher);\n    const fieldCount = fieldStats.reduce((sum, stat) => sum + stat.count, 0);\n\n    this.setState({ fieldCount, fieldLabel, fieldStats, fieldValue, showFieldStats: true });\n  };\n\n  onMouseOverMessage = () => {\n    // Don't parse right away, user might move along\n    this.mouseMessageTimer = setTimeout(this.parseMessage, 500);\n  };\n\n  onMouseOutMessage = () => {\n    clearTimeout(this.mouseMessageTimer);\n    this.setState({ parsed: false });\n  };\n\n  parseMessage = () => {\n    if (!this.state.parsed) {\n      const { row } = this.props;\n      const parser = getParser(row.entry);\n      if (parser) {\n        // Use parser to highlight detected fields\n        const parsedFieldHighlights = parser.getFields(this.props.row.entry);\n        this.setState({ parsedFieldHighlights, parsed: true, parser });\n      }\n    }\n  };\n\n  render() {\n    const {\n      getRows,\n      highlighterExpressions,\n      onClickLabel,\n      row,\n      showDuplicates,\n      showLabels,\n      showLocalTime,\n      showUtc,\n    } = this.props;\n    const {\n      fieldCount,\n      fieldLabel,\n      fieldStats,\n      fieldValue,\n      parsed,\n      parsedFieldHighlights,\n      showFieldStats,\n    } = this.state;\n    const { entry, hasAnsi, raw } = row;\n    const previewHighlights = highlighterExpressions && !_.isEqual(highlighterExpressions, row.searchWords);\n    const highlights = previewHighlights ? highlighterExpressions : row.searchWords;\n    const needsHighlighter = highlights && highlights.length > 0 && highlights[0].length > 0;\n    const highlightClassName = classnames('logs-row__match-highlight', {\n      'logs-row__match-highlight--preview': previewHighlights,\n    });\n\n    return (\n      <div className=\"logs-row\">\n        {showDuplicates && (\n          <div className=\"logs-row__duplicates\">{row.duplicates > 0 ? `${row.duplicates + 1}x` : null}</div>\n        )}\n        <div className={row.logLevel ? `logs-row__level logs-row__level--${row.logLevel}` : ''} />\n        {showUtc && (\n          <div className=\"logs-row__time\" title={`Local: ${row.timeLocal} (${row.timeFromNow})`}>\n            {row.timestamp}\n          </div>\n        )}\n        {showLocalTime && (\n          <div className=\"logs-row__localtime\" title={`${row.timestamp} (${row.timeFromNow})`}>\n            {row.timeLocal}\n          </div>\n        )}\n        {showLabels && (\n          <div className=\"logs-row__labels\">\n            <LogLabels getRows={getRows} labels={row.uniqueLabels} onClickLabel={onClickLabel} />\n          </div>\n        )}\n        <div className=\"logs-row__message\" onMouseEnter={this.onMouseOverMessage} onMouseLeave={this.onMouseOutMessage}>\n          {parsed && (\n            <Highlighter\n              autoEscape\n              highlightTag={FieldHighlight(this.onClickHighlight)}\n              textToHighlight={entry}\n              searchWords={parsedFieldHighlights}\n              highlightClassName=\"logs-row__field-highlight\"\n            />\n          )}\n          {!parsed && needsHighlighter && (\n            <Highlighter\n              textToHighlight={entry}\n              searchWords={highlights}\n              findChunks={findHighlightChunksInText}\n              highlightClassName={highlightClassName}\n            />\n          )}\n          {hasAnsi && !parsed && !needsHighlighter && <LogMessageAnsi value={raw} />}\n          {!hasAnsi && !parsed && !needsHighlighter && entry}\n          {showFieldStats && (\n            <div className=\"logs-row__stats\">\n              <LogLabelStats\n                stats={fieldStats}\n                label={fieldLabel}\n                value={fieldValue}\n                onClickClose={this.onClickClose}\n                rowCount={fieldCount}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","import _ from 'lodash';\nimport React, { PureComponent } from 'react';\n\nimport * as rangeUtil from 'app/core/utils/rangeutil';\nimport { RawTimeRange, Switch } from '@grafana/ui';\nimport TimeSeries from 'app/core/time_series2';\n\nimport { LogsDedupDescription, LogsDedupStrategy, LogsModel, LogLevel, LogsMetaKind } from 'app/core/logs_model';\n\nimport ToggleButtonGroup, { ToggleButton } from 'app/core/components/ToggleButtonGroup/ToggleButtonGroup';\n\nimport Graph from './Graph';\nimport { LogLabels } from './LogLabels';\nimport { LogRow } from './LogRow';\n\nconst PREVIEW_LIMIT = 100;\n\nconst graphOptions = {\n  series: {\n    stack: true,\n    bars: {\n      show: true,\n      lineWidth: 5,\n      // barWidth: 10,\n    },\n    // stack: true,\n  },\n  yaxis: {\n    tickDecimals: 0,\n  },\n};\n\nfunction renderMetaItem(value: any, kind: LogsMetaKind) {\n  if (kind === LogsMetaKind.LabelsMap) {\n    return (\n      <span className=\"logs-meta-item__labels\">\n        <LogLabels labels={value} plain />\n      </span>\n    );\n  }\n  return value;\n}\n\ninterface Props {\n  data?: LogsModel;\n  dedupedData?: LogsModel;\n  width: number;\n  exploreId: string;\n  highlighterExpressions: string[];\n  loading: boolean;\n  range?: RawTimeRange;\n  scanning?: boolean;\n  scanRange?: RawTimeRange;\n  dedupStrategy: LogsDedupStrategy;\n  hiddenLogLevels: Set<LogLevel>;\n  onChangeTime?: (range: RawTimeRange) => void;\n  onClickLabel?: (label: string, value: string) => void;\n  onStartScanning?: () => void;\n  onStopScanning?: () => void;\n  onDedupStrategyChange: (dedupStrategy: LogsDedupStrategy) => void;\n  onToggleLogLevel: (hiddenLogLevels: Set<LogLevel>) => void;\n}\n\ninterface State {\n  deferLogs: boolean;\n  renderAll: boolean;\n  showLabels: boolean;\n  showLocalTime: boolean;\n  showUtc: boolean;\n}\n\nexport default class Logs extends PureComponent<Props, State> {\n  deferLogsTimer: NodeJS.Timer;\n  renderAllTimer: NodeJS.Timer;\n\n  state = {\n    deferLogs: true,\n    renderAll: false,\n    showLabels: false,\n    showLocalTime: true,\n    showUtc: false,\n  };\n\n  componentDidMount() {\n    // Staged rendering\n    if (this.state.deferLogs) {\n      const { data } = this.props;\n      const rowCount = data && data.rows ? data.rows.length : 0;\n      // Render all right away if not too far over the limit\n      const renderAll = rowCount <= PREVIEW_LIMIT * 2;\n      this.deferLogsTimer = setTimeout(() => this.setState({ deferLogs: false, renderAll }), rowCount);\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // Staged rendering\n    if (prevState.deferLogs && !this.state.deferLogs && !this.state.renderAll) {\n      this.renderAllTimer = setTimeout(() => this.setState({ renderAll: true }), 2000);\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.deferLogsTimer);\n    clearTimeout(this.renderAllTimer);\n  }\n\n  onChangeDedup = (dedup: LogsDedupStrategy) => {\n    const { onDedupStrategyChange } = this.props;\n    if (this.props.dedupStrategy === dedup) {\n      return onDedupStrategyChange(LogsDedupStrategy.none);\n    }\n    return onDedupStrategyChange(dedup);\n  };\n\n  onChangeLabels = (event: React.SyntheticEvent) => {\n    const target = event.target as HTMLInputElement;\n    this.setState({\n      showLabels: target.checked,\n    });\n  };\n\n  onChangeLocalTime = (event: React.SyntheticEvent) => {\n    const target = event.target as HTMLInputElement;\n    this.setState({\n      showLocalTime: target.checked,\n    });\n  };\n\n  onChangeUtc = (event: React.SyntheticEvent) => {\n    const target = event.target as HTMLInputElement;\n    this.setState({\n      showUtc: target.checked,\n    });\n  };\n\n  onToggleLogLevel = (rawLevel: string, hiddenRawLevels: Set<string>) => {\n    const hiddenLogLevels: Set<LogLevel> = new Set(Array.from(hiddenRawLevels).map(level => LogLevel[level]));\n    this.props.onToggleLogLevel(hiddenLogLevels);\n  };\n\n  onClickScan = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n    this.props.onStartScanning();\n  };\n\n  onClickStopScan = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n    this.props.onStopScanning();\n  };\n\n  render() {\n    const {\n      data,\n      exploreId,\n      highlighterExpressions,\n      loading = false,\n      onClickLabel,\n      range,\n      scanning,\n      scanRange,\n      width,\n      dedupedData,\n    } = this.props;\n\n    if (!data) {\n      return null;\n    }\n\n    const { deferLogs, renderAll, showLabels, showLocalTime, showUtc } = this.state;\n    const { dedupStrategy } = this.props;\n    const hasData = data && data.rows && data.rows.length > 0;\n    const hasLabel = hasData && dedupedData.hasUniqueLabels;\n    const dedupCount = dedupedData.rows.reduce((sum, row) => sum + row.duplicates, 0);\n    const showDuplicates = dedupStrategy !== LogsDedupStrategy.none && dedupCount > 0;\n    const meta = [...data.meta];\n\n    if (dedupStrategy !== LogsDedupStrategy.none) {\n      meta.push({\n        label: 'Dedup count',\n        value: dedupCount,\n        kind: LogsMetaKind.Number,\n      });\n    }\n\n    // Staged rendering\n    const processedRows = dedupedData.rows;\n    const firstRows = processedRows.slice(0, PREVIEW_LIMIT);\n    const lastRows = processedRows.slice(PREVIEW_LIMIT);\n    const scanText = scanRange ? `Scanning ${rangeUtil.describeTimeRange(scanRange)}` : 'Scanning...';\n\n    // React profiler becomes unusable if we pass all rows to all rows and their labels, using getter instead\n    const getRows = () => processedRows;\n    const timeSeries = data.series.map(series => new TimeSeries(series));\n\n    return (\n      <div className=\"logs-panel\">\n        <div className=\"logs-panel-graph\">\n          <Graph\n            data={timeSeries}\n            height={100}\n            width={width}\n            range={range}\n            id={`explore-logs-graph-${exploreId}`}\n            onChangeTime={this.props.onChangeTime}\n            onToggleSeries={this.onToggleLogLevel}\n            userOptions={graphOptions}\n          />\n        </div>\n        <div className=\"logs-panel-options\">\n          <div className=\"logs-panel-controls\">\n            <Switch label=\"Timestamp\" checked={showUtc} onChange={this.onChangeUtc} transparent />\n            <Switch label=\"Local time\" checked={showLocalTime} onChange={this.onChangeLocalTime} transparent />\n            <Switch label=\"Labels\" checked={showLabels} onChange={this.onChangeLabels} transparent />\n            <ToggleButtonGroup label=\"Dedup\" transparent={true}>\n              {Object.keys(LogsDedupStrategy).map((dedupType, i) => (\n                <ToggleButton\n                  key={i}\n                  value={dedupType}\n                  onChange={this.onChangeDedup}\n                  selected={dedupStrategy === dedupType}\n                  tooltip={LogsDedupDescription[dedupType]}\n                >\n                  {dedupType}\n                </ToggleButton>\n              ))}\n            </ToggleButtonGroup>\n          </div>\n        </div>\n\n        {hasData && meta && (\n          <div className=\"logs-panel-meta\">\n            {meta.map(item => (\n              <div className=\"logs-panel-meta__item\" key={item.label}>\n                <span className=\"logs-panel-meta__label\">{item.label}:</span>\n                <span className=\"logs-panel-meta__value\">{renderMetaItem(item.value, item.kind)}</span>\n              </div>\n            ))}\n          </div>\n        )}\n\n        <div className=\"logs-rows\">\n          {hasData &&\n          !deferLogs && // Only inject highlighterExpression in the first set for performance reasons\n            firstRows.map(row => (\n              <LogRow\n                key={row.key + row.duplicates}\n                getRows={getRows}\n                highlighterExpressions={highlighterExpressions}\n                row={row}\n                showDuplicates={showDuplicates}\n                showLabels={showLabels && hasLabel}\n                showLocalTime={showLocalTime}\n                showUtc={showUtc}\n                onClickLabel={onClickLabel}\n              />\n            ))}\n          {hasData &&\n            !deferLogs &&\n            renderAll &&\n            lastRows.map(row => (\n              <LogRow\n                key={row.key + row.duplicates}\n                getRows={getRows}\n                row={row}\n                showDuplicates={showDuplicates}\n                showLabels={showLabels && hasLabel}\n                showLocalTime={showLocalTime}\n                showUtc={showUtc}\n                onClickLabel={onClickLabel}\n              />\n            ))}\n          {hasData && deferLogs && <span>Rendering {dedupedData.rows.length} rows...</span>}\n        </div>\n        {!loading && !hasData && !scanning && (\n          <div className=\"logs-panel-nodata\">\n            No logs found.\n            <a className=\"link\" onClick={this.onClickScan}>\n              Scan for older logs\n            </a>\n          </div>\n        )}\n\n        {scanning && (\n          <div className=\"logs-panel-nodata\">\n            <span>{scanText}</span>\n            <a className=\"link\" onClick={this.onClickStopScan}>\n              Stop scan\n            </a>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import { memoize } from 'lodash';\nimport { createSelectorCreator } from 'reselect';\n\nconst hashFn = (...args) => args.reduce((acc, val) => acc + '-' + JSON.stringify(val), '');\nexport const createLodashMemoizedSelector = createSelectorCreator(memoize, hashFn);\n","import { createLodashMemoizedSelector } from 'app/core/utils/reselect';\nimport { ExploreItemState } from 'app/types';\nimport { filterLogLevels, dedupLogRows } from 'app/core/logs_model';\n\nexport const exploreItemUIStateSelector = (itemState: ExploreItemState) => {\n  const { showingGraph, showingLogs, showingTable, showingStartPage, dedupStrategy } = itemState;\n  return {\n    showingGraph,\n    showingLogs,\n    showingTable,\n    showingStartPage,\n    dedupStrategy,\n  };\n};\n\nconst logsSelector = (state: ExploreItemState) => state.logsResult;\nconst hiddenLogLevelsSelector = (state: ExploreItemState) => state.hiddenLogLevels;\nconst dedupStrategySelector = (state: ExploreItemState) => state.dedupStrategy;\nexport const deduplicatedLogsSelector = createLodashMemoizedSelector(\n  logsSelector,\n  hiddenLogLevelsSelector,\n  dedupStrategySelector,\n  (logs, hiddenLogLevels, dedupStrategy) => {\n    if (!logs) {\n      return null;\n    }\n    const filteredData = filterLogLevels(logs, new Set(hiddenLogLevels));\n    return dedupLogRows(filteredData, dedupStrategy);\n  }\n);\n","import React, { PureComponent } from 'react';\n\nconst INTERVAL = 150;\n\nexport default class ElapsedTime extends PureComponent<any, any> {\n  offset: number;\n  timer: number;\n\n  state = {\n    elapsed: 0,\n  };\n\n  start() {\n    this.offset = Date.now();\n    this.timer = window.setInterval(this.tick, INTERVAL);\n  }\n\n  tick = () => {\n    const jetzt = Date.now();\n    const elapsed = jetzt - this.offset;\n    this.setState({ elapsed });\n  };\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.time) {\n      clearInterval(this.timer);\n    } else if (this.props.time) {\n      this.start();\n    }\n  }\n\n  componentDidMount() {\n    this.start();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  render() {\n    const { elapsed } = this.state;\n    const { className, time } = this.props;\n    const value = (time || elapsed) / 1000;\n    return <span className={`elapsed-time ${className}`}>{value.toFixed(1)}s</span>;\n  }\n}\n","import React, { PureComponent } from 'react';\n\nimport { QueryTransaction } from 'app/types/explore';\nimport ElapsedTime from './ElapsedTime';\n\nfunction formatLatency(value) {\n  return `${(value / 1000).toFixed(1)}s`;\n}\n\ninterface QueryTransactionStatusItemProps {\n  transaction: QueryTransaction;\n}\n\nclass QueryTransactionStatusItem extends PureComponent<QueryTransactionStatusItemProps> {\n  render() {\n    const { transaction } = this.props;\n    const className = transaction.done ? 'query-transaction' : 'query-transaction query-transaction--loading';\n    return (\n      <div className={className}>\n        <div className=\"query-transaction__type\">{transaction.resultType}:</div>\n        <div className=\"query-transaction__duration\">\n          {transaction.done ? formatLatency(transaction.latency) : <ElapsedTime />}\n        </div>\n      </div>\n    );\n  }\n}\n\ninterface QueryTransactionStatusProps {\n  transactions: QueryTransaction[];\n}\n\nexport default class QueryTransactionStatus extends PureComponent<QueryTransactionStatusProps> {\n  render() {\n    const { transactions } = this.props;\n    return (\n      <div className=\"query-transactions\">\n        {transactions.map((t, i) => (\n          <QueryTransactionStatusItem key={`${t.rowIndex}:${t.resultType}`} transaction={t} />\n        ))}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\n\nimport { StoreState } from 'app/types';\nimport { ExploreId } from 'app/types/explore';\n\nimport ErrorBoundary from './ErrorBoundary';\nimport Explore from './Explore';\nimport { CustomScrollbar } from '@grafana/ui';\nimport { resetExploreAction } from './state/actionTypes';\n\ninterface WrapperProps {\n  split: boolean;\n  resetExploreAction: typeof resetExploreAction;\n}\n\nexport class Wrapper extends Component<WrapperProps> {\n  componentWillUnmount() {\n    this.props.resetExploreAction();\n  }\n\n  render() {\n    const { split } = this.props;\n\n    return (\n      <div className=\"page-scrollbar-wrapper\">\n        <CustomScrollbar autoHeightMin={'100%'} className=\"custom-scrollbar--page\">\n          <div className=\"explore-wrapper\">\n            <ErrorBoundary>\n              <Explore exploreId={ExploreId.left} />\n            </ErrorBoundary>\n            {split && (\n              <ErrorBoundary>\n                <Explore exploreId={ExploreId.right} />\n              </ErrorBoundary>\n            )}\n          </div>\n        </CustomScrollbar>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => {\n  const { split } = state.explore;\n  return { split };\n};\n\nconst mapDispatchToProps = {\n  resetExploreAction,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(Wrapper)\n);\n"],"sourceRoot":""}